#!/usr/bin/env python
"""
Test du masquage complet des sections d'√©valuation
"""

import os
import sys
import django
from datetime import date

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'equivalence.settings')
django.setup()

from dossiers.models import Dossier, Candidat, EtatDossier
from users.models import CustomUser
from django.test import Client
from django.urls import reverse

def test_masquage_complet():
    """Test que toutes les sections d'√©valuation sont masqu√©es"""
    print("=== Test Masquage Complet des Sections ===")
    
    try:
        # 1. Cr√©er un utilisateur professeur
        prof_user = CustomUser.objects.create_user(
            username='prof_test_masquage_complet',
            email='prof_masquage_complet@example.com',
            password='profpass123',
            role='professeur'
        )
        print("‚úÖ Professeur cr√©√©:", prof_user.username)
        
        # 2. Cr√©er un dossier
        dossier = Dossier.objects.create(
            titre="Dossier test masquage complet",
            description="Test du masquage complet des sections",
            statut='en_cours'
        )
        dossier.professeurs.add(prof_user)
        print("‚úÖ Dossier cr√©√©:", dossier.titre)
        
        # 3. Cr√©er un candidat
        candidat = Candidat.objects.create(
            dossier=dossier,
            nom="Candidat Test Masquage Complet",
            date_arrivee=date(2024, 1, 15),
            pays_origine="Maroc"
        )
        print("‚úÖ Candidat cr√©√©:", candidat.nom)
        
        # 4. PAS de consistance acad√©mique (pas d'√©valuation)
        print("‚úÖ Aucune consistance acad√©mique cr√©√©e")
        
        # 5. Tester l'acc√®s √† la vue d'√©valuation
        print("\n--- Test de l'affichage des sections ---")
        client = Client()
        
        # Se connecter en tant que professeur
        login_success = client.login(username='prof_test_masquage_complet', password='profpass123')
        print(f"‚úÖ Connexion professeur: {login_success}")
        
        # Acc√©der √† la vue d'√©valuation
        url = reverse('dossiers:evaluation_equivalence', args=[dossier.id])
        response = client.get(url)
        print(f"‚úÖ Code r√©ponse: {response.status_code}")
        
        if response.status_code == 200:
            content = response.content.decode()
            
            # V√©rifier que TOUTES les sections d'√©valuation sont MASQU√âES
            sections_a_masquer = [
                "R√©sum√© de l'interpr√©tation",
                "Grille d'√©valuation et interpr√©tation des r√©sultats",
                "Section Stages et professionnalisation",
                "D√©cision de la commission"
            ]
            
            sections_masquees = True
            for section in sections_a_masquer:
                if section in content:
                    print(f"‚ùå Section '{section}' affich√©e (ne devrait pas l'√™tre)")
                    sections_masquees = False
                else:
                    print(f"‚úÖ Section '{section}' masqu√©e (correct)")
            
            # V√©rifier que le tableau TOTAL n'est pas affich√©
            if "TOTAL" in content and "0/100" in content:
                print("‚ùå Tableau TOTAL affich√© (ne devrait pas l'√™tre)")
                sections_masquees = False
            else:
                print("‚úÖ Tableau TOTAL masqu√© (correct)")
            
            # V√©rifier que la d√©cision ant√©rieure est affich√©e (si elle existe)
            if "D√©cision Ant√©rieure" in content:
                print("‚úÖ D√©cision ant√©rieure affich√©e (correct)")
            else:
                print("‚ÑπÔ∏è Pas de d√©cision ant√©rieure (normal)")
            
            if sections_masquees:
                print("\nüéâ TOUTES les sections d'√©valuation sont masqu√©es !")
            else:
                print("\n‚ö†Ô∏è Certaines sections d'√©valuation sont encore visibles")
                
        else:
            print("‚ùå Erreur d'acc√®s √† la vue d'√©valuation")
        
        # 6. Nettoyer les donn√©es de test
        print("\n--- Nettoyage ---")
        dossier.delete()
        prof_user.delete()
        print("‚úÖ Donn√©es de test supprim√©es")
        
        print("\nüéâ Test de masquage complet termin√© !")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    test_masquage_complet()

