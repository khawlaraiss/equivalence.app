from django.shortcuts import render, get_object_or_404, redirect
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.http import JsonResponse, HttpResponse
from django.template.loader import render_to_string
from django.utils import timezone
from django.db.models import Q
from datetime import datetime
from .models import Dossier, PieceJointe, RapportAnalyse, HistoriqueAction, Candidat, Diplome, PieceManquante, Competence, EvaluationCompetence, DecisionCommission, Notification, EtapeEvaluation, EvaluationEtape, IndicateurDiplome, EtatDossier, ConsistanceAcademique, DossierTraite, StructureEvaluationGlobale
from users.models import CustomUser
from django.db import models
import io
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import letter, A4
from reportlab.lib.units import inch
from reportlab.lib import colors
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from django.core.paginator import Paginator
from django.template.loader import render_to_string
from django.http import FileResponse
import os
from django.conf import settings
import pandas as pd

def evaluer_candidat(candidat_id):
    """
    Fonction pour √©valuer un candidat selon la grille d'√©quivalence
    """
    candidat = Candidat.objects.get(id=candidat_id)
    
    # Calculer le score total
    evaluations = candidat.evaluations.all()
    score_total = sum(eval.points_obtenus for eval in evaluations)
    
    # D√©terminer la d√©cision selon les seuils
    if score_total >= 76:
        decision = 'equivalence_accorder'
    elif score_total >= 50:
        decision = 'completement_dossier'
    elif score_total >= 30:
        decision = 'invitation_soutenance'
    elif score_total >= 20:
        decision = 'invitation_concours'
    else:
        decision = 'non_equivalent'
    
    # G√©n√©rer les recommandations selon la d√©cision
    recommandations = generer_recommandations(candidat, decision, score_total)
    
    # Cr√©er ou mettre √† jour la d√©cision
    decision_obj, created = DecisionCommission.objects.get_or_create(
        candidat=candidat,
        defaults={
            'score_total': score_total,
            'decision': decision,
            'recommandations': recommandations
        }
    )
    
    if not created:
        decision_obj.score_total = score_total
        decision_obj.decision = decision
        decision_obj.recommandations = recommandations
        decision_obj.save()
    
    return decision_obj

def generer_recommandations(candidat, decision, score_total):
    """
    G√©n√®re les recommandations selon la d√©cision et le score
    """
    recommandations = []
    
    if decision == 'equivalence_accorder':
        recommandations.append("‚úÖ √âquivalence accord√©e")
        recommandations.append("üìã Aucune condition suppl√©mentaire requise")
    
    elif decision == 'completement_dossier':
        recommandations.append("‚ö†Ô∏è Compl√®tement de dossier")
        
        # V√©rifier les pi√®ces manquantes
        pieces_manquantes = candidat.pieces_manquantes.all()
        if pieces_manquantes:
            recommandations.append("üìÑ Pi√®ces manquantes √† fournir :")
            for piece in pieces_manquantes:
                recommandations.append(f"   ‚Ä¢ {piece.description}")
        
        # Recommandations selon le score
        if score_total < 60:
            recommandations.append("üéì Stages recommand√©s :")
            recommandations.append("   ‚Ä¢ Stage en topographie : 2 semaines")
            recommandations.append("   ‚Ä¢ Stage en g√©od√©sie : 2 semaines")
        
        if score_total < 70:
            recommandations.append("üìö Cours compl√©mentaires recommand√©s")
    
    elif decision == 'invitation_soutenance':
        recommandations.append("üéì Invitation √† la soutenance")
        recommandations.append("üìö Formation compl√©mentaire requise")
        recommandations.append("üîÑ Possibilit√© de nouvelle demande apr√®s formation")
    
    elif decision == 'invitation_concours':
        recommandations.append("üéì Invitation au concours")
        recommandations.append("üìö Formation compl√©mentaire requise")
        recommandations.append("üîÑ Possibilit√© de nouvelle demande apr√®s formation")
    
    else:  # non_equivalent
        recommandations.append("‚ùå √âquivalence refus√©e")
        recommandations.append("üìö Formation compl√©mentaire requise")
        recommandations.append("üîÑ Possibilit√© de nouvelle demande apr√®s formation")
    
    return "\n".join(recommandations)

def creer_notification(destinataire, type_notification, titre, message, dossier=None):
    """Fonction utilitaire pour cr√©er des notifications"""
    notification = Notification.objects.create(
        destinataire=destinataire,
        type_notification=type_notification,
        titre=titre,
        message=message,
        dossier=dossier
    )
    return notification

@login_required
def recherche_avancee(request):
    """Recherche avanc√©e dans les dossiers"""
    query = request.GET.get('q', '')
    statut = request.GET.get('statut', '')
    date_debut = request.GET.get('date_debut', '')
    date_fin = request.GET.get('date_fin', '')
    professeur = request.GET.get('professeur', '')
    
    dossiers = Dossier.objects.all()
    
    if query:
        dossiers = dossiers.filter(
            Q(titre__icontains=query) |
            Q(description__icontains=query) |
            Q(candidat__nom__icontains=query) |
            Q(candidat__pays_origine__icontains=query)
        )
    
    if statut:
        dossiers = dossiers.filter(statut=statut)
    
    if date_debut:
        dossiers = dossiers.filter(date_reception__gte=date_debut)
    
    if date_fin:
        dossiers = dossiers.filter(date_reception__lte=date_fin)
    
    if professeur:
        dossiers = dossiers.filter(professeurs__username__icontains=professeur)
    
    # Statistiques de recherche
    total_trouve = dossiers.count()
    par_statut = {
        'non_traite': dossiers.filter(statut='non_traite').count(),
        'en_cours': dossiers.filter(statut='en_cours').count(),
        'traite': dossiers.filter(statut='traite').count(),
    }
    
    context = {
        'dossiers': dossiers,
        'query': query,
        'statut': statut,
        'date_debut': date_debut,
        'date_fin': date_fin,
        'professeur': professeur,
        'total_trouve': total_trouve,
        'par_statut': par_statut,
    }
    
    return render(request, 'dossiers/recherche_avancee.html', context)

@login_required
def notifications(request):
    """Gestion des notifications"""
    notifications = request.user.notifications.all()
    
    if request.method == 'POST':
        notification_id = request.POST.get('notification_id')
        if notification_id:
            try:
                notification = Notification.objects.get(id=notification_id, destinataire=request.user)
                notification.lu = True
                notification.save()
                return JsonResponse({'success': True})
            except Notification.DoesNotExist:
                return JsonResponse({'success': False})
    
    context = {
        'notifications': notifications,
        'non_lues': notifications.filter(lu=False).count(),
    }
    
    return render(request, 'dossiers/notifications.html', context)

@login_required
def marquer_toutes_lues(request):
    """Marquer toutes les notifications comme lues"""
    request.user.notifications.filter(lu=False).update(lu=True)
    messages.success(request, "Toutes les notifications ont √©t√© marqu√©es comme lues.")
    return redirect('dossiers:notifications')

@login_required
def supprimer_notification(request, notification_id):
    """Supprimer une notification"""
    try:
        notification = Notification.objects.get(id=notification_id, destinataire=request.user)
        notification.delete()
        messages.success(request, "Notification supprim√©e avec succ√®s.")
    except Notification.DoesNotExist:
        messages.error(request, "Notification non trouv√©e.")
    
    return redirect('dossiers:notifications')

@login_required
def import_csv_dossiers(request):
    """Importer des dossiers depuis un fichier CSV"""
    if request.user.role != 'admin':
        messages.error(request, "Acc√®s non autoris√©")
        return redirect('dossiers:dashboard')
    
    if request.method == 'POST':
        csv_file = request.FILES.get('csv_file')
        if csv_file:
            try:
                # V√©rifier l'extension du fichier
                if not csv_file.name.endswith('.csv'):
                    messages.error(request, "Veuillez s√©lectionner un fichier CSV valide.")
                    return render(request, 'dossiers/import_csv.html')
                
                # Lire le fichier CSV
                import csv
                from io import StringIO
                
                # D√©coder le contenu du fichier
                content = csv_file.read().decode('utf-8')
                csv_data = StringIO(content)
                
                # Parser le CSV
                reader = csv.DictReader(csv_data)
                
                                                 # V√©rifier les colonnes requises
                required_columns = ['numero', 'demandeur_candidat', 'reference', 'date_envoi', 'date_reception', 'diplome', 'universite', 'pays', 'avis_commission']
                if not all(col in reader.fieldnames for col in required_columns):
                    messages.error(request, f"Le fichier CSV doit contenir les colonnes : {', '.join(required_columns)}")
                    return render(request, 'dossiers/import_csv.html')
                
                # Traiter chaque ligne
                dossiers_crees = 0
                dossiers_erreurs = 0
                
                for row_num, row in enumerate(reader, start=2):  # Commencer √† 2 car la ligne 1 est l'en-t√™te
                    try:
                        # Cr√©er le dossier trait√© directement
                        dossier_traite = DossierTraite.objects.create(
                            numero=row['numero'].strip(),
                            demandeur_candidat=row['demandeur_candidat'].strip(),
                            reference=row['reference'].strip(),
                            date_envoi=row.get('date_envoi', timezone.now().date()),
                            date_reception=row.get('date_reception', timezone.now().date()),
                            diplome=row['diplome'].strip(),
                            universite=row['universite'].strip(),
                            pays=row['pays'].strip(),
                            avis_commission=row['avis_commission'].strip(),
                            reference_reception=row.get('reference_reception', ''),
                            universite_autre=row.get('universite_autre', ''),
                            pays_autre=row.get('pays_autre', ''),
                            date_avis=row.get('date_avis', None),
                            date_decision=row.get('date_decision', None),
                            cree_par=request.user
                        )
                        
                        dossiers_crees += 1
                        
                    except Exception as e:
                        dossiers_erreurs += 1
                        messages.warning(request, f"Erreur ligne {row_num}: {str(e)}")
                
                if dossiers_crees > 0:
                    messages.success(request, f"{dossiers_crees} dossiers import√©s avec succ√®s depuis le fichier CSV.")
                if dossiers_erreurs > 0:
                    messages.warning(request, f"{dossiers_erreurs} dossiers n'ont pas pu √™tre import√©s.")
                
                return redirect('dossiers:dossiers_traites_admin')
                
            except Exception as e:
                messages.error(request, f"Erreur lors de l'import : {str(e)}")
        else:
            messages.error(request, "Veuillez s√©lectionner un fichier CSV.")
    
    return render(request, 'dossiers/import_csv.html')

@login_required
def import_csv_auto(request):
    """Import automatique de tous les dossiers depuis un fichier CSV"""
    if request.user.role != 'admin':
        messages.error(request, "Acc√®s non autoris√©")
        return redirect('dossiers:dashboard')
    
    # Logique d'import automatique similaire mais sans interface utilisateur
    # Cette fonction peut √™tre appel√©e par un script ou une t√¢che planifi√©e
    
    messages.success(request, "Import automatique CSV d√©clench√© avec succ√®s.")
    return redirect('dossiers:dossiers_traites_admin')

@login_required
def rapports_statistiques(request):
    """G√©n√©ration de rapports et statistiques"""
    if request.user.role != 'admin':
        messages.error(request, "Acc√®s non autoris√©")
        return redirect('dossiers:dashboard')
    
    # Statistiques g√©n√©rales
    total_dossiers = Dossier.objects.count()
    dossiers_non_traites = Dossier.objects.filter(statut='non_traite').count()
    dossiers_en_cours = Dossier.objects.filter(statut='en_cours').count()
    dossiers_traites = Dossier.objects.filter(statut='traite').count()
    
    # Statistiques par professeur
    professeurs_stats = []
    professeurs = CustomUser.objects.filter(role='professeur')
    for prof in professeurs:
        dossiers_assignes = prof.dossiers_attribues.count()
        dossiers_traites_prof = prof.dossiers_attribues.filter(statut='traite').count()
        taux_traitement = (dossiers_traites_prof / dossiers_assignes * 100) if dossiers_assignes > 0 else 0
        
        professeurs_stats.append({
            'professeur': prof,
            'dossiers_assignes': dossiers_assignes,
            'dossiers_traites': dossiers_traites_prof,
            'taux_traitement': round(taux_traitement, 1)
        })
    
    # Statistiques par mois
    from django.db.models import Count
    from django.db.models.functions import TruncMonth
    
    dossiers_par_mois = Dossier.objects.annotate(
        mois=TruncMonth('date_reception')
    ).values('mois').annotate(
        total=Count('id'),
        traites=Count('id', filter=Q(statut='traite')),
        en_cours=Count('id', filter=Q(statut='en_cours')),
        non_traites=Count('id', filter=Q(statut='non_traite'))
    ).order_by('mois')
    
    # Statistiques des √©valuations (5 types de d√©cisions)
    total_evaluations = DecisionCommission.objects.count()
    evaluations_completes = DecisionCommission.objects.filter(decision='equivalence_accorder').count()
    evaluations_conditionnelles = DecisionCommission.objects.filter(decision='completement_dossier').count()
    evaluations_invitation_soutenance = DecisionCommission.objects.filter(decision='invitation_soutenance').count()
    evaluations_invitation_concours = DecisionCommission.objects.filter(decision='invitation_concours').count()
    evaluations_refusees = DecisionCommission.objects.filter(decision='non_equivalent').count()
    
    # Moyenne des scores
    if total_evaluations > 0:
        moyenne_score = DecisionCommission.objects.aggregate(
            moyenne=models.Avg('score_total')
        )['moyenne']
    else:
        moyenne_score = 0
    
    context = {
        'total_dossiers': total_dossiers,
        'dossiers_non_traites': dossiers_non_traites,
        'dossiers_en_cours': dossiers_en_cours,
        'dossiers_traites': dossiers_traites,
        'professeurs_stats': professeurs_stats,
        'dossiers_par_mois': dossiers_par_mois,
        'total_evaluations': total_evaluations,
        'evaluations_completes': evaluations_completes,
        'evaluations_conditionnelles': evaluations_conditionnelles,
        'evaluations_invitation_soutenance': evaluations_invitation_soutenance,
        'evaluations_invitation_concours': evaluations_invitation_concours,
        'evaluations_refusees': evaluations_refusees,
        'moyenne_score': round(moyenne_score, 1) if moyenne_score else 0,
    }
    
    return render(request, 'dossiers/rapports_statistiques.html', context)

@login_required
def dashboard(request):
    """Tableau de bord principal - redirige selon le r√¥le"""
    if request.user.role == 'admin':
        return redirect('dossiers:admin_dossiers')
    else:
        return redirect('dossiers:professeur_dossiers')

@login_required
def admin_dossiers(request):
    """Tableau de bord administrateur"""
    if request.user.role != 'admin':
        messages.error(request, "Acc√®s non autoris√©")
        return redirect('dossiers:dashboard')
    
    dossiers = Dossier.objects.all().order_by('-id')
    professeurs = CustomUser.objects.filter(role='professeur')
    
    # Filtrage par statut
    statut_filter = request.GET.get('statut')
    if statut_filter:
        dossiers = dossiers.filter(statut=statut_filter)
    
    # Calcul des statistiques
    total_dossiers = Dossier.objects.count()
    non_traites = Dossier.objects.filter(statut='non_traite').count()
    en_cours = Dossier.objects.filter(statut='en_cours').count()
    traites = Dossier.objects.filter(statut='traite').count()
    
    # Statistiques des dossiers trait√©s (import Excel)
    total_dossiers_traites = DossierTraite.objects.count()
    
    context = {
        'dossiers': dossiers,
        'professeurs': professeurs,
        'statuts': Dossier.STATUT_CHOICES,
        'total_dossiers': total_dossiers,
        'non_traites': non_traites,
        'en_cours': en_cours,
        'traites': traites,
        'total_dossiers_traites': total_dossiers_traites,
    }
    return render(request, 'dossiers/admin_dashboard.html', context)

@login_required
def dossiers_traites(request):
    """Vue sp√©ciale pour afficher les dossiers trait√©s pour les administrateurs"""
    if request.user.role != 'admin':
        messages.error(request, "Acc√®s non autoris√©")
        return redirect('dossiers:dashboard')

    # R√©cup√©rer uniquement les dossiers trait√©s
    dossiers_traites = Dossier.objects.filter(statut='traite').order_by('-id')
    professeurs = CustomUser.objects.filter(role='professeur')

    # Filtres optionnels
    date_debut = request.GET.get('date_debut')
    date_fin = request.GET.get('date_fin')
    professeur_filter = request.GET.get('professeur')

    if date_debut:
        dossiers_traites = dossiers_traites.filter(date_reception__gte=date_debut)
    if date_fin:
        dossiers_traites = dossiers_traites.filter(date_reception__lte=date_fin)
    if professeur_filter:
        dossiers_traites = dossiers_traites.filter(professeurs__id=professeur_filter)

    # Calcul des statistiques sp√©cifiques aux dossiers trait√©s
    total_traites = Dossier.objects.filter(statut='traite').count()
    traites_ce_mois = Dossier.objects.filter(statut='traite', date_reception__month=timezone.now().month).count()
    traites_ce_semaine = Dossier.objects.filter(statut='traite', date_reception__gte=timezone.now() - timezone.timedelta(days=7)).count()

    context = {
        'dossiers': dossiers_traites,
        'professeurs': professeurs,
        'total_traites': total_traites,
        'traites_ce_mois': traites_ce_mois,
        'traites_ce_semaine': traites_ce_semaine,
    }
    return render(request, 'dossiers/dossiers_traites.html', context)

@login_required
def gestion_dossiers(request):
    """Interface de gestion des dossiers"""
    if request.user.role != 'admin':
        messages.error(request, "Acc√®s non autoris√©")
        return redirect('dossiers:dashboard')
    
    dossiers = Dossier.objects.all().order_by('-id')
    professeurs = CustomUser.objects.filter(role='professeur')
    
    # Filtrage par statut
    statut_filter = request.GET.get('statut')
    if statut_filter:
        dossiers = dossiers.filter(statut=statut_filter)
    
    # Filtrage par date
    date_filter = request.GET.get('date_reception')
    if date_filter:
        dossiers = dossiers.filter(date_reception=date_filter)
    
    # Calcul des statistiques
    total_dossiers = Dossier.objects.count()
    non_traites = Dossier.objects.filter(statut='non_traite').count()
    en_cours = Dossier.objects.filter(statut='en_cours').count()
    traites = Dossier.objects.filter(statut='traite').count()
    
    context = {
        'dossiers': dossiers,
        'professeurs': professeurs,
        'statuts': Dossier.STATUT_CHOICES,
        'total_dossiers': total_dossiers,
        'non_traites': non_traites,
        'en_cours': en_cours,
        'traites': traites,
    }
    return render(request, 'dossiers/gestion_dossiers.html', context)

@login_required
def ajouter_dossier(request):
    """Ajouter un nouveau dossier"""
    if request.user.role != 'admin':
        messages.error(request, "Acc√®s non autoris√©")
        return redirect('dossiers:dashboard')
    
    if request.method == 'POST':
        reference = request.POST.get('reference')
        date_reference = request.POST.get('date_reception')
        description = request.POST.get('description')
        statut = request.POST.get('statut')
        
        try:
            dossier = Dossier.objects.create(
                titre=reference,  # Utiliser la r√©f√©rence comme titre
                description=description,
                statut=statut,
                date_reception=date_reference if date_reference else timezone.now().date()
            )
            
            # G√©rer les pi√®ces jointes s√©par√©es
            diplome = request.FILES.get('diplome')
            programme = request.FILES.get('programme')
            notes = request.FILES.get('notes')
            
            if diplome:
                PieceJointe.objects.create(
                    dossier=dossier,
                    fichier=diplome,
                    description="Dipl√¥me"
                )
            
            if programme:
                PieceJointe.objects.create(
                    dossier=dossier,
                    fichier=programme,
                    description="Programme"
                )
            
            if notes:
                PieceJointe.objects.create(
                    dossier=dossier,
                    fichier=notes,
                    description="Notes"
                )
            
            messages.success(request, f"Dossier '{reference}' cr√©√© avec succ√®s")
        except Exception as e:
            messages.error(request, f"Erreur lors de la cr√©ation : {str(e)}")
        
        return redirect('dossiers:gestion_dossiers')
    
    return redirect('dossiers:gestion_dossiers')

@login_required
def professeur_dossiers(request):
    """Tableau de bord professeur"""
    if request.user.role != 'professeur':
        messages.error(request, "Acc√®s non autoris√©")
        return redirect('dossiers:dashboard')
    
    dossiers_attribues = request.user.dossiers_attribues.all().order_by('-id')
    
    # Filtrage par statut
    statut_filter = request.GET.get('statut')
    if statut_filter:
        dossiers_attribues = dossiers_attribues.filter(statut=statut_filter)
    
    # Calcul des statistiques
    total_attribues = request.user.dossiers_attribues.count()
    a_traiter = request.user.dossiers_attribues.filter(statut='non_traite').count()
    en_cours = request.user.dossiers_attribues.filter(statut='en_cours').count()
    termines = request.user.dossiers_attribues.filter(statut='traite').count()
    
    context = {
        'dossiers': dossiers_attribues,
        'statuts': Dossier.STATUT_CHOICES,
        'total_attribues': total_attribues,
        'a_traiter': a_traiter,
        'en_cours': en_cours,
        'termines': termines,
        'notifications_recentes': request.user.notifications.filter(lu=False).order_by('-date_creation')[:3],
    }
    return render(request, 'dossiers/professeur_dashboard.html', context)

@login_required
def dossier_detail(request, dossier_id):
    """D√©tails d'un dossier"""
    dossier = get_object_or_404(Dossier, id=dossier_id)
    
    # V√©rifier les permissions
    if request.user.role == 'professeur' and dossier not in request.user.dossiers_attribues.all():
        messages.error(request, "Acc√®s non autoris√© √† ce dossier")
        return redirect('dossiers:professeur_dossiers')
    
    # V√©rifier si une √©valuation compl√®te existe d√©j√†
    candidat = None
    consistance = None
    a_evaluation = False
    
    try:
        candidat_existant = Candidat.objects.get(dossier=dossier)
        candidat = candidat_existant
        # V√©rifier si une consistance acad√©mique existe ET a des notes
        try:
            consistance = ConsistanceAcademique.objects.get(candidat=candidat_existant)
            # V√©rifier si au moins une note a √©t√© saisie (tous les crit√®res)
            notes_saisies = False
            
            # V√©rifier les crit√®res obligatoires et non-obligatoires
            if (consistance.sciences_geodesiques_note is not None or 
                consistance.topographie_note is not None or 
                consistance.photogrammetrie_note is not None or 
                consistance.cartographie_note is not None or
                consistance.droit_foncier_note is not None or
                consistance.sig_note is not None or
                consistance.teledetection_note is not None or
                consistance.stages_note is not None):
                notes_saisies = True
            
            # V√©rifier les crit√®res personnalis√©s
            if len(consistance.criteres_personnalises) > 0:
                for critere in consistance.criteres_personnalises:
                    if critere.get('note') is not None:
                        notes_saisies = True
                        break
            
            a_evaluation = notes_saisies
            
            # IMPORTANT: Si consistance existe, m√™me sans notes, consid√©rer qu'il y a une √©valuation
            if consistance:
                a_evaluation = True
                
        except ConsistanceAcademique.DoesNotExist:
            a_evaluation = False
    except Candidat.DoesNotExist:
        a_evaluation = False
    
    # D√©tecter si on doit afficher la d√©cision ant√©rieure ou les nouvelles notes
    afficher_decision_anterieure = False
    if candidat and hasattr(candidat, 'etat_dossier') and candidat.etat_dossier:
        if candidat.etat_dossier.a_decision_anterieure:
            # Si il y a une d√©cision ant√©rieure ET une nouvelle √©valuation, afficher les nouvelles notes
            if a_evaluation:
                afficher_decision_anterieure = False  # Afficher les nouvelles notes
            else:
                afficher_decision_anterieure = True   # Afficher l'ancienne d√©cision
    
    # R√©cup√©rer les informations de d√©cision ant√©rieure
    decision_anterieure_info = None
    if candidat and hasattr(candidat, 'etat_dossier') and candidat.etat_dossier:
        if candidat.etat_dossier.a_decision_anterieure:
            decision_anterieure_info = {
                'a_decision_anterieure': True,
                'decision_anterieure': candidat.etat_dossier.decision_anterieure,
                'date_decision_anterieure': candidat.etat_dossier.date_decision_anterieure,
                'pieces_demandees': candidat.etat_dossier.pieces_demandees,
            }
    
    context = {
        'dossier': dossier,
        'candidat': candidat,
        'consistance': consistance,
        'pieces_jointes': dossier.pieces_jointes.all(),
        'historiques': dossier.historiques.all().order_by('-date_action'),
        'a_evaluation': a_evaluation,
        'afficher_decision_anterieure': afficher_decision_anterieure,
        'decision_anterieure_info': decision_anterieure_info,
    }
    return render(request, 'dossiers/dossier_detail.html', context)

@login_required
def affecter_dossier(request, dossier_id):
    """Affecter un dossier √† des professeurs (admin seulement)"""
    if request.user.role != 'admin':
        messages.error(request, "Acc√®s non autoris√©")
        return redirect('dossiers:dashboard')
    
    dossier = get_object_or_404(Dossier, id=dossier_id)
    
    if request.method == 'POST':
        professeur_ids = request.POST.getlist('professeurs')
        professeurs = CustomUser.objects.filter(id__in=professeur_ids, role='professeur')
        
        dossier.professeurs.set(professeurs)
        dossier.statut = 'en_cours'
        dossier.save()
        
        # Cr√©er un historique
        HistoriqueAction.objects.create(
            dossier=dossier,
            utilisateur=request.user,
            action=f"Dossier affect√© √† {', '.join([p.username for p in professeurs])}"
        )
        
        # Cr√©er des notifications pour les professeurs
        notifications_creees = 0
        for professeur in professeurs:
            try:
                # V√©rifier si une notification d'affectation existe d√©j√† pour ce professeur et ce dossier
                notification_existante = Notification.objects.filter(
                    destinataire=professeur,
                    dossier=dossier,
                    type_notification='affectation'
                ).first()
                
                if not notification_existante:
                    creer_notification(
                        destinataire=professeur,
                        type_notification='affectation',
                        titre=f"Nouveau dossier assign√©",
                        message=f"Le dossier '{dossier.titre}' vous a √©t√© assign√© pour traitement.",
                        dossier=dossier
                    )
                    notifications_creees += 1
                else:
                    # Mettre √† jour la notification existante si n√©cessaire
                    notification_existante.lu = False
                    notification_existante.save()
                    notifications_creees += 1
                    
            except Exception as e:
                print(f"Erreur lors de la cr√©ation de notification pour {professeur.username}: {e}")
                # Continuer malgr√© l'erreur pour ne pas bloquer l'affectation
        
        messages.success(request, f"Dossier affect√© avec succ√®s √† {len(professeurs)} professeur(s).")
        return redirect('dossiers:dossier_detail', dossier_id=dossier.id)
    
    # Calculer les statistiques des professeurs
    professeurs = CustomUser.objects.filter(role='professeur')
    professeurs_stats = []
    
    for professeur in professeurs:
        dossiers_en_cours = professeur.dossiers_attribues.filter(statut='en_cours').count()
        dossiers_traites = professeur.dossiers_attribues.filter(statut='traite').count()
        total_dossiers = professeur.dossiers_attribues.count()
        
        professeurs_stats.append({
            'professeur': professeur,
            'dossiers_en_cours': dossiers_en_cours,
            'dossiers_traites': dossiers_traites,
            'total_dossiers': total_dossiers,
        })
    
    context = {
        'dossier': dossier,
        'professeurs': professeurs,
        'professeurs_stats': professeurs_stats,
    }
    return render(request, 'dossiers/affecter_dossier.html', context)







@login_required
def etat_dossier(request, dossier_id):
    """Vue pour g√©rer la grille d'√©valuation des dossiers (nouveau ou existant)"""
    if request.user.role != 'professeur':
        messages.error(request, "Seuls les professeurs peuvent g√©rer la grille d'√©valuation des dossiers")
        return redirect('dossiers:dossier_detail', dossier_id=dossier_id)
    
    dossier = get_object_or_404(Dossier, id=dossier_id)
    
    try:
        candidat = Candidat.objects.get(dossier=dossier)
    except Candidat.DoesNotExist:
        # Cr√©er un candidat par d√©faut si aucun n'existe
        candidat = Candidat.objects.create(
            dossier=dossier,
            nom=f"Candidat {dossier.titre}",
            date_arrivee=dossier.date_reception,
            pays_origine="Non sp√©cifi√©"
        )
    
            # R√©cup√©rer ou cr√©er la grille d'√©valuation du dossier
    etat, created = EtatDossier.objects.get_or_create(
        candidat=candidat,
        defaults={
            'est_nouveau_dossier': True,
            'a_decision_anterieure': False,
        }
    )
    
    if request.method == 'POST':
        # Traiter les donn√©es du formulaire
        est_nouveau = request.POST.get('est_nouveau_dossier') == 'on'
        est_existant = request.POST.get('est_dossier_existant') == 'on'
        
        # Si l'un est coch√©, l'autre est forc√©ment d√©coch√©
        if est_nouveau:
            etat.est_nouveau_dossier = True
        elif est_existant:
            etat.est_nouveau_dossier = False
        else:
            # Par d√©faut, nouveau dossier
            etat.est_nouveau_dossier = True
        
        if not etat.est_nouveau_dossier:
            # Si ce n'est pas un nouveau dossier, on demande les d√©tails des d√©cisions ant√©rieures
            etat.a_decision_anterieure = request.POST.get('a_decision_anterieure') == 'on'
            
            if etat.a_decision_anterieure:
                date_decision = request.POST.get('date_decision_anterieure', '')
                if date_decision:
                    try:
                        etat.date_decision_anterieure = datetime.strptime(date_decision, '%Y-%m-%d').date()
                    except ValueError:
                        pass
                etat.decision_anterieure = request.POST.get('decision_anterieure', '')
            
            # Pi√®ces demand√©es (liste pr√©d√©finie)
            pieces_demandees = [
                "Les copies certifi√©es des deux dipl√¥mes obtenus",
                "Un justificatif des ann√©es d'√©tudes pour le Bachelor et le Master",
                "Le programme d√©taill√© des cours du Bachelor et du Master (version originale + traduction en fran√ßais)",
                "Les relev√©s de notes du Bachelor et du Master traduits en fran√ßais",
                "Des attestations ou rapports de stage en topographie, g√©od√©sie, photogramm√©trie, techniques cadastrales",
                "Un CV du candidat",
                "Une copie de la Carte d'Identit√© Nationale"
            ]
            etat.pieces_demandees = "\n".join([f"‚Ä¢ {piece}" for piece in pieces_demandees])
        
        etat.save()
        
        messages.success(request, "Grille d'√©valuation du dossier mise √† jour avec succ√®s")
        
        # Redirection selon la grille d'√©valuation du dossier
        if etat.est_nouveau_dossier:
            # Si nouveau dossier (Oui), on passe √† la consistance acad√©mique
            return redirect('dossiers:consistance_academique', dossier_id=dossier_id)
        else:
            # Si dossier existant (Non), on reste sur cette page pour voir les d√©cisions ant√©rieures
            return redirect('dossiers:etat_dossier', dossier_id=dossier_id)
    
    context = {
        'dossier': dossier,
        'candidat': candidat,
        'etat': etat,
    }
    return render(request, 'dossiers/etat_dossier.html', context)

@login_required
def consistance_academique(request, dossier_id):
    dossier = get_object_or_404(Dossier, id=dossier_id)
    
    # V√©rifier que l'utilisateur est un professeur uniquement
    if request.user.role != 'professeur':
        messages.error(request, "Acc√®s non autoris√©. Seuls les professeurs peuvent effectuer l'√©valuation acad√©mique.")
        return redirect('dossiers:dossier_detail', dossier_id=dossier_id)
    
    # V√©rifier si un candidat existe d√©j√† pour ce dossier
    try:
        candidat = Candidat.objects.get(dossier=dossier)
    except Candidat.DoesNotExist:
        # Cr√©er un candidat par d√©faut si aucun n'existe
        candidat = Candidat.objects.create(
            dossier=dossier,
            nom=f"Candidat {dossier.titre}",
            date_arrivee=dossier.date_reception,
            pays_origine="Non sp√©cifi√©"
        )
    
    # R√©cup√©rer ou cr√©er ConsistanceAcademique - SIMPLE ET DIRECT
    try:
        consistance = ConsistanceAcademique.objects.get(candidat=candidat)
    except ConsistanceAcademique.DoesNotExist:
        consistance = ConsistanceAcademique(candidat=candidat)
        consistance.save()  # Cr√©er l'objet d'abord
    
    # R√©cup√©rer la structure globale mise √† jour par l'admin
    try:
        structure_globale = StructureEvaluationGlobale.objects.first()
        if not structure_globale:
            # Cr√©er une structure par d√©faut si elle n'existe pas
            structure_globale = StructureEvaluationGlobale.objects.create()
        
        # S'assurer que les champs JSON ne sont pas None
        if structure_globale.competences_criteres_fixes is None:
            structure_globale.competences_criteres_fixes = {}
        if structure_globale.criteres_fixes_supprimes is None:
            structure_globale.criteres_fixes_supprimes = []
        if structure_globale.criteres_personnalises_globaux is None:
            structure_globale.criteres_personnalises_globaux = []
        
        # Trier les crit√®res personnalis√©s par ordre d'ajout (par ID) pour garantir l'ordre d'affichage
        if structure_globale.criteres_personnalises_globaux:
            structure_globale.criteres_personnalises_globaux.sort(key=lambda x: x.get('id', 0))
        
        # Initialiser les comp√©tences par d√©faut si elles n'existent pas
        if 'sciences_geodesiques' not in structure_globale.competences_criteres_fixes or not structure_globale.competences_criteres_fixes['sciences_geodesiques']:
            structure_globale.competences_criteres_fixes['sciences_geodesiques'] = [
                "Th√©orique et pratique de la g√©od√©sie",
                "Mesures g√©od√©siques", 
                "Calculs g√©od√©siques"
            ]
        if 'topographie' not in structure_globale.competences_criteres_fixes or not structure_globale.competences_criteres_fixes['topographie']:
            structure_globale.competences_criteres_fixes['topographie'] = [
                "Th√©orique et pratique de la topographie",
                "Topom√©trique et instrumentation",
                "Techniques de mensuration"
            ]
        if 'photogrammetrie' not in structure_globale.competences_criteres_fixes or not structure_globale.competences_criteres_fixes['photogrammetrie']:
            structure_globale.competences_criteres_fixes['photogrammetrie'] = [
                "Base et approfondie de la photogramm√©trie",
                "Mise en place des photographies a√©riennes",
                "A√©rotriangulation",
                "Restitution photogramm√©trique",
                "G√©n√©ration de produits d√©riv√©s (MNT/Ortho)",
                "Drone"
            ]
        if 'cartographie' not in structure_globale.competences_criteres_fixes or not structure_globale.competences_criteres_fixes['cartographie']:
            structure_globale.competences_criteres_fixes['cartographie'] = [
                "Th√©orique et pratique de la cartographie",
                "Techniques de cartographie",
                "Produits cartographiques"
            ]
        if 'droit_foncier' not in structure_globale.competences_criteres_fixes or not structure_globale.competences_criteres_fixes['droit_foncier']:
            structure_globale.competences_criteres_fixes['droit_foncier'] = [
                "Droit foncier",
                "Cadastre",
                "Am√©nagements fonciers"
            ]
        if 'sig' not in structure_globale.competences_criteres_fixes or not structure_globale.competences_criteres_fixes['sig']:
            structure_globale.competences_criteres_fixes['sig'] = [
                "Syst√®mes d'Information G√©ographique",
                "Applications SIG",
                "Analyse spatiale"
            ]
        if 'teledetection' not in structure_globale.competences_criteres_fixes or not structure_globale.competences_criteres_fixes['teledetection']:
            structure_globale.competences_criteres_fixes['teledetection'] = [
                "T√©l√©d√©tection",
                "Traitement d'images",
                "Applications de t√©l√©d√©tection"
            ]
            
    except Exception as e:
        print(f"Erreur lors de la r√©cup√©ration de la structure globale: {e}")
        # Cr√©er une structure temporaire par d√©faut
        class StructureTemporaire:
            def __init__(self):
                self.sciences_geodesiques_note_max = 15
                self.topographie_note_max = 16
                self.photogrammetrie_note_max = 15
                self.cartographie_note_max = 12
                self.droit_foncier_note_max = 10
                self.sig_note_max = 12
                self.teledetection_note_max = 10
                self.stages_note_max = 10
                self.criteres_personnalises_globaux = []
                self.competences_criteres_fixes = {}
                self.criteres_fixes_supprimes = []
                self.date_modification = timezone.now()
        structure_globale = StructureTemporaire()
        
        # Trier les crit√®res personnalis√©s par ordre d'ajout (par ID) pour garantir l'ordre d'affichage
        if structure_globale.criteres_personnalises_globaux:
            structure_globale.criteres_personnalises_globaux.sort(key=lambda x: x.get('id', 0))
    
    if request.method == 'POST':
        # V√âRIFIER si c'est un retour √† l'admin
        if request.POST.get('retour_admin'):
            # RETOUR √Ä L'ADMIN : Traitement sp√©cial sans toucher aux notes
            message_professeur = request.POST.get('message_professeur', '').strip()
            
            # Cr√©er notification directement et rediriger
            historique_affectation = HistoriqueAction.objects.filter(
                dossier=dossier,
                action__icontains='affect√©'
            ).order_by('-date_action').first()
            
            if historique_affectation:
                admin_affecteur = historique_affectation.utilisateur
            else:
                admins = CustomUser.objects.filter(role='admin')
                admin_affecteur = admins.first() if admins.exists() else None
            
            if admin_affecteur:
                # R√©cup√©rer la note actuelle SANS la modifier
                consistance_actuelle = ConsistanceAcademique.objects.get(candidat=candidat)
                note_totale_actuelle = consistance_actuelle.note_totale
                
                message_base = f"Le professeur {request.user.get_full_name() or request.user.username} a termin√© l'√©valuation du dossier '{dossier.titre}' et demande la validation. Score total : {note_totale_actuelle}/100 points."
                
                if message_professeur:
                    message_base += f"\n\nMessage du professeur : {message_professeur}"
                
                creer_notification(
                    destinataire=admin_affecteur,
                    type_notification='traitement',
                    titre=f"Retour du dossier trait√© : {dossier.titre}",
                    message=message_base,
                    dossier=dossier
                )
                messages.success(request, "Retour √† l'administrateur effectu√© avec succ√®s. Notification envoy√©e.")
            
            return redirect('dossiers:dossier_detail', dossier_id=dossier_id)
        
        # VALIDATION DES NOTES OBLIGATOIRES
        notes_manquantes = []
        
        # V√©rifier les crit√®res fixes obligatoires
        if 'sciences_geodesiques' not in structure_globale.criteres_fixes_supprimes:
            if not request.POST.get('sciences_geodesiques_note') or not request.POST.get('sciences_geodesiques_note').strip():
                notes_manquantes.append("Sciences g√©od√©siques")
        
        if 'topographie' not in structure_globale.criteres_fixes_supprimes:
            if not request.POST.get('topographie_note') or not request.POST.get('topographie_note').strip():
                notes_manquantes.append("Topographie")
        
        if 'photogrammetrie' not in structure_globale.criteres_fixes_supprimes:
            if not request.POST.get('photogrammetrie_note') or not request.POST.get('photogrammetrie_note').strip():
                notes_manquantes.append("Photogramm√©trie")
        
        if 'cartographie' not in structure_globale.criteres_fixes_supprimes:
            if not request.POST.get('cartographie_note') or not request.POST.get('cartographie_note').strip():
                notes_manquantes.append("Cartographie")
        
        if 'droit_foncier' not in structure_globale.criteres_fixes_supprimes:
            if not request.POST.get('droit_foncier_note') or not request.POST.get('droit_foncier_note').strip():
                notes_manquantes.append("Droit foncier")
        
        if 'sig' not in structure_globale.criteres_fixes_supprimes:
            if not request.POST.get('sig_note') or not request.POST.get('sig_note').strip():
                notes_manquantes.append("SIG")
        
        if 'teledetection' not in structure_globale.criteres_fixes_supprimes:
            if not request.POST.get('teledetection_note') or not request.POST.get('teledetection_note').strip():
                notes_manquantes.append("T√©l√©d√©tection")
        
        # V√©rifier la note des stages
        if not request.POST.get('stages_note') or not request.POST.get('stages_note').strip():
            notes_manquantes.append("Stages")
        
        # V√©rifier les notes des crit√®res personnalis√©s
        if structure_globale.criteres_personnalises_globaux:
            for critere in structure_globale.criteres_personnalises_globaux:
                critere_id = critere.get('id')
                note_critere = request.POST.get(f'note_critere_personnalise_{critere_id}')
                if not note_critere or not note_critere.strip():
                    notes_manquantes.append(f"Crit√®re personnalis√© : {critere.get('nom')}")
        
        # Si des notes sont manquantes, afficher l'erreur et ne pas sauvegarder
        if notes_manquantes:
            messages.error(request, f"‚ùå ERREUR : Vous devez remplir TOUTES les notes obligatoires !\n\nNotes manquantes : {', '.join(notes_manquantes)}")
            return render(request, 'dossiers/consistance_academique.html', context)
        
        # SAUVEGARDE NORMALE DES NOTES (seulement si pas de retour admin)
        # Sciences g√©od√©siques
        sciences_geodesiques_note = request.POST.get('sciences_geodesiques_note')
        consistance.sciences_geodesiques_contenus = request.POST.get('sciences_geodesiques_contenus', '')
        consistance.sciences_geodesiques_commentaires = request.POST.get('sciences_geodesiques_commentaires', '')
        
        if sciences_geodesiques_note and sciences_geodesiques_note.strip():
            try:
                note_saisie = int(sciences_geodesiques_note)
                note_max = structure_globale.sciences_geodesiques_note_max
                if note_saisie < 0 or note_saisie > note_max:
                    messages.error(request, f"‚ùå ERREUR : La note pour Sciences g√©od√©siques doit √™tre entre 0 et {note_max} (saisie: {note_saisie})")
                    return render(request, 'dossiers/consistance_academique.html', context)
                consistance.sciences_geodesiques_note = note_saisie
            except ValueError:
                messages.error(request, "‚ùå ERREUR : La note pour Sciences g√©od√©siques doit √™tre un nombre entier valide")
                return render(request, 'dossiers/consistance_academique.html', context)
        else:
            consistance.sciences_geodesiques_note = None
        
        # Topographie
        topographie_note = request.POST.get('topographie_note')
        consistance.topographie_contenus = request.POST.get('topographie_contenus', '')
        consistance.topographie_commentaires = request.POST.get('topographie_commentaires', '')
        
        if topographie_note and topographie_note.strip():
            try:
                note_saisie = int(topographie_note)
                note_max = structure_globale.topographie_note_max
                if note_saisie < 0 or note_saisie > note_max:
                    messages.error(request, f"‚ùå ERREUR : La note pour Topographie doit √™tre entre 0 et {note_max} (saisie: {note_saisie})")
                    return render(request, 'dossiers/consistance_academique.html', context)
                consistance.topographie_note = note_saisie
            except ValueError:
                messages.error(request, "‚ùå ERREUR : La note pour Topographie doit √™tre un nombre entier valide")
                return render(request, 'dossiers/consistance_academique.html', context)
        else:
            consistance.topographie_note = None

        
        # Photogramm√©trie
        consistance.photogrammetrie_contenus = request.POST.get('photogrammetrie_contenus', '')
        consistance.photogrammetrie_commentaires = request.POST.get('photogrammetrie_commentaires', '')
        photogrammetrie_note = request.POST.get('photogrammetrie_note')
        
        if photogrammetrie_note and photogrammetrie_note.strip():
            try:
                note_saisie = int(photogrammetrie_note)
                note_max = structure_globale.photogrammetrie_note_max
                if note_saisie < 0 or note_saisie > note_max:
                    messages.error(request, f"‚ùå ERREUR : La note pour Photogramm√©trie doit √™tre entre 0 et {note_max} (saisie: {note_saisie})")
                    return render(request, 'dossiers/consistance_academique.html', context)
                consistance.photogrammetrie_note = note_saisie
            except ValueError:
                messages.error(request, "‚ùå ERREUR : La note pour Photogramm√©trie doit √™tre un nombre entier valide")
                return render(request, 'dossiers/consistance_academique.html', context)
        else:
            consistance.photogrammetrie_note = None
        
        # Checkboxes Photogramm√©trie
        consistance.photogrammetrie_base_approfondie = 'photogrammetrie_base_approfondie' in request.POST
        consistance.photogrammetrie_photographies_aeriennes = 'photogrammetrie_photographies_aeriennes' in request.POST
        consistance.photogrammetrie_aerotriangulation = 'photogrammetrie_aerotriangulation' in request.POST
        consistance.photogrammetrie_restitution = 'photogrammetrie_restitution' in request.POST
        consistance.photogrammetrie_produits_derives = 'photogrammetrie_produits_derives' in request.POST
        consistance.photogrammetrie_drone = 'photogrammetrie_drone' in request.POST
        
        # Cartographie
        consistance.cartographie_contenus = request.POST.get('cartographie_contenus', '')
        consistance.cartographie_commentaires = request.POST.get('cartographie_commentaires', '')
        cartographie_note = request.POST.get('cartographie_note')
        
        if cartographie_note and cartographie_note.strip():
            try:
                note_saisie = int(cartographie_note)
                note_max = structure_globale.cartographie_note_max
                if note_saisie < 0 or note_saisie > note_max:
                    messages.error(request, f"‚ùå ERREUR : La note pour Cartographie doit √™tre entre 0 et {note_max} (saisie: {note_saisie})")
                    return render(request, 'dossiers/consistance_academique.html', context)
                consistance.cartographie_note = note_saisie
            except ValueError:
                messages.error(request, "‚ùå ERREUR : La note pour Cartographie doit √™tre un nombre entier valide")
                return render(request, 'dossiers/consistance_academique.html', context)
        else:
            consistance.cartographie_note = None
        consistance.cartographie_drone = 'cartographie_drone' in request.POST
        
        # Droit foncier
        consistance.droit_foncier_contenus = request.POST.get('droit_foncier_contenus', '')
        consistance.droit_foncier_commentaires = request.POST.get('droit_foncier_commentaires', '')
        droit_foncier_note = request.POST.get('droit_foncier_note')
        
        if droit_foncier_note and droit_foncier_note.strip():
            try:
                note_saisie = int(droit_foncier_note)
                note_max = structure_globale.droit_foncier_note_max
                if note_saisie < 0 or note_saisie > note_max:
                    messages.error(request, f"‚ùå ERREUR : La note pour Droit foncier doit √™tre entre 0 et {note_max} (saisie: {note_saisie})")
                    return render(request, 'dossiers/consistance_academique.html', context)
                consistance.droit_foncier_note = note_saisie
            except ValueError:
                messages.error(request, "‚ùå ERREUR : La note pour Droit foncier doit √™tre un nombre entier valide")
                return render(request, 'dossiers/consistance_academique.html', context)
        else:
            consistance.droit_foncier_note = None
        
        # SIG
        consistance.sig_contenus = request.POST.get('sig_contenus', '')
        consistance.sig_commentaires = request.POST.get('sig_commentaires', '')
        sig_note = request.POST.get('sig_note')
        
        if sig_note and sig_note.strip():
            try:
                note_saisie = int(sig_note)
                note_max = structure_globale.sig_note_max
                if note_saisie < 0 or note_saisie > note_max:
                    messages.error(request, f"‚ùå ERREUR : La note pour SIG doit √™tre entre 0 et {note_max} (saisie: {note_saisie})")
                    return render(request, 'dossiers/consistance_academique.html', context)
                consistance.sig_note = note_saisie
            except ValueError:
                messages.error(request, "‚ùå ERREUR : La note pour SIG doit √™tre un nombre entier valide")
                return render(request, 'dossiers/consistance_academique.html', context)
        else:
            consistance.sig_note = None
        
        # T√©l√©d√©tection
        consistance.teledetection_contenus = request.POST.get('teledetection_contenus', '')
        consistance.teledetection_commentaires = request.POST.get('teledetection_commentaires', '')
        teledetection_note = request.POST.get('teledetection_note')
        
        if teledetection_note and teledetection_note.strip():
            try:
                note_saisie = int(teledetection_note)
                note_max = structure_globale.teledetection_note_max
                if note_saisie < 0 or note_saisie > note_max:
                    messages.error(request, f"‚ùå ERREUR : La note pour T√©l√©d√©tection doit √™tre entre 0 et {note_max} (saisie: {note_saisie})")
                    return render(request, 'dossiers/consistance_academique.html', context)
                consistance.teledetection_note = note_saisie
            except ValueError:
                messages.error(request, "‚ùå ERREUR : La note pour T√©l√©d√©tection doit √™tre un nombre entier valide")
                return render(request, 'dossiers/consistance_academique.html', context)
        else:
            consistance.teledetection_note = None
        
        # Stages et professionnalisation
        consistance.stages_contenus = request.POST.get('stages_contenus', '')
        consistance.stages_commentaires = request.POST.get('stages_commentaires', '')
        stages_note = request.POST.get('stages_note')
        
        if stages_note and stages_note.strip():
            try:
                note_saisie = int(stages_note)
                note_max = structure_globale.stages_note_max
                if note_saisie < 0 or note_saisie > note_max:
                    messages.error(request, f"‚ùå ERREUR : La note pour Stages doit √™tre entre 0 et {note_max} (saisie: {note_saisie})")
                    return render(request, 'dossiers/consistance_academique.html', context)
                consistance.stages_note = note_saisie
            except ValueError:
                messages.error(request, "‚ùå ERREUR : La note pour Stages doit √™tre un nombre entier valide")
                return render(request, 'dossiers/consistance_academique.html', context)
        else:
            consistance.stages_note = None
        
        # Stages par d√©faut (seulement s'ils ne sont pas supprim√©s par l'admin)
        if not hasattr(structure_globale, 'stages_defaut_supprimes') or structure_globale.stages_defaut_supprimes is None:
            structure_globale.stages_defaut_supprimes = []
            
        if 'stage_conservation_fonciere' not in structure_globale.stages_defaut_supprimes:
            consistance.stage_conservation_fonciere = 'stage_conservation_fonciere' in request.POST
        if 'stage_cadastre' not in structure_globale.stages_defaut_supprimes:
            consistance.stage_cadastre = 'stage_cadastre' in request.POST
        if 'stage_topographie' not in structure_globale.stages_defaut_supprimes:
            consistance.stage_topographie = 'stage_topographie' in request.POST
        if 'stage_geodesie' not in structure_globale.stages_defaut_supprimes:
            consistance.stage_geodesie = 'stage_geodesie' in request.POST
        if 'stage_photogrammetrie' not in structure_globale.stages_defaut_supprimes:
            consistance.stage_photogrammetrie = 'stage_photogrammetrie' in request.POST
        consistance.stage_techniques_cadastrales = 'stage_techniques_cadastrales' in request.POST
        
        # Stages configurables
        stages_configurables_cochees = []
        if hasattr(structure_globale, 'stages_configurables') and structure_globale.stages_configurables:
            for stage in structure_globale.stages_configurables:
                if request.POST.get(f'stage_configurable_{stage["id"]}'):
                    stages_configurables_cochees.append(stage["id"])
        consistance.stages_configurables_cochees = stages_configurables_cochees
        
        # Gestion des boutons stages (nouveaux champs) - mutuellement exclusifs
        stages_status = request.POST.get('stages_status')
        consistance.stages_acheves = stages_status == 'acheves'
        consistance.stages_non_acheves = stages_status == 'non_acheves'
        consistance.message_stages_non_acheves = request.POST.get('message_stages_non_acheves', '')
        
        # Gestion des crit√®res personnalis√©s (seuls les administrateurs peuvent ajouter/supprimer)
        action_critere = request.POST.get('action_critere')
        if action_critere == 'ajouter' and request.user.role == 'admin':
            nom_critere = request.POST.get('nom_critere_personnalise', '').strip()
            note_max_critere = request.POST.get('note_max_critere_personnalise', 0)
            if nom_critere and note_max_critere:
                try:
                    note_max = int(note_max_critere)
                    nouveau_critere = {
                        'id': len(consistance.criteres_personnalises) + 1,
                        'nom': nom_critere,
                        'note_max': note_max,
                        'note': None,
                        'contenus': '',
                        'commentaires': ''
                    }
                    consistance.criteres_personnalises.append(nouveau_critere)
                    messages.success(request, f"Crit√®re '{nom_critere}' ajout√© avec succ√®s.")
                except ValueError:
                    pass
        elif action_critere == 'supprimer' and request.user.role == 'admin':
            critere_id = request.POST.get('critere_id')
            if critere_id:
                try:
                    critere_id = int(critere_id)
                    critere_a_supprimer = None
                    for critere in consistance.criteres_personnalises:
                        if critere.get('id') == critere_id:
                            critere_a_supprimer = critere
                            break
                    
                    if critere_a_supprimer:
                        consistance.criteres_personnalises = [
                            c for c in consistance.criteres_personnalises 
                            if c.get('id') != critere_id
                        ]
                        messages.success(request, f"Crit√®re '{critere_a_supprimer.get('nom')}' supprim√© avec succ√®s.")
                except ValueError:
                    pass
        
        # Gestion des comp√©tences pour chaque crit√®re personnalis√© (seuls les administrateurs peuvent ajouter/supprimer)
        for critere in consistance.criteres_personnalises:
            critere_id = critere.get('id')
            # Initialisation des listes si absentes
            if 'competences' not in critere:
                critere['competences'] = []
            if 'competences_cochees' not in critere:
                critere['competences_cochees'] = []
            
            # Ajout d'une comp√©tence (seuls les administrateurs)
            if request.POST.get(f'ajouter_competence_{critere_id}') and request.user.role == 'admin':
                nouvelle_comp = request.POST.get(f'nouvelle_competence_{critere_id}', '').strip()
                if nouvelle_comp:
                    critere['competences'].append(nouvelle_comp)
                    messages.success(request, f"Comp√©tence '{nouvelle_comp}' ajout√©e au crit√®re '{critere.get('nom')}'.")
            
            # Suppression d'une comp√©tence (seuls les administrateurs)
            for idx, comp in enumerate(critere['competences']):
                if request.POST.get(f'supprimer_competence_{critere_id}_{idx}') and request.user.role == 'admin':
                    critere['competences'].pop(idx)
                    # On retire aussi l'index des coch√©es si besoin
                    if idx in critere['competences_cochees']:
                        critere['competences_cochees'].remove(idx)
                    messages.success(request, f"Comp√©tence '{comp}' supprim√©e du crit√®re '{critere.get('nom')}'.")
                    break
            # Gestion des cases coch√©es
            competences_cochees = []
            for idx in range(len(critere['competences'])):
                if request.POST.get(f'competence_{critere_id}_{idx}'):
                    competences_cochees.append(idx)
            critere['competences_cochees'] = competences_cochees
            
            # R√©cup√©ration de la note saisie manuellement par le professeur
            note_critere = request.POST.get(f'note_critere_personnalise_{critere_id}')
            if note_critere and note_critere.strip():
                try:
                    note_saisie = int(note_critere)
                    note_max = critere.get('note_max', 10)
                    
                    # V√©rifier que la note ne d√©passe pas la note maximale d√©finie par l'admin
                    if note_saisie < 0:
                        messages.error(request, f"‚ùå ERREUR : La note pour '{critere.get('nom')}' ne peut pas √™tre n√©gative (saisie: {note_saisie})")
                        return render(request, 'dossiers/consistance_academique.html', context)
                    elif note_saisie > note_max:
                        messages.error(request, f"‚ùå ERREUR : La note pour '{critere.get('nom')}' ne peut pas d√©passer {note_max} (saisie: {note_saisie})")
                        return render(request, 'dossiers/consistance_academique.html', context)
                    else:
                        critere['note'] = note_saisie
                except ValueError:
                    messages.error(request, f"‚ùå ERREUR : La note pour '{critere.get('nom')}' doit √™tre un nombre entier valide")
                    return render(request, 'dossiers/consistance_academique.html', context)
            else:
                critere['note'] = None
        
        # SAUVEGARDE DIRECTE ET SIMPLE
        consistance.save()
        
        # Forcer une transaction commit
        from django.db import transaction
        transaction.commit()
        
        # √âvaluer les crit√®res obligatoires
        evaluation_resultats = consistance.evaluer_criteres_obligatoires()
        
        # V√©rifier si le dossier est compl√®tement trait√© (au moins une note saisie)
        notes_saisies = any([
            consistance.sciences_geodesiques_note is not None,
            consistance.topographie_note is not None,
            consistance.photogrammetrie_note is not None,
            consistance.cartographie_note is not None,
            consistance.droit_foncier_note is not None,
            consistance.sig_note is not None,
            consistance.teledetection_note is not None,
            consistance.stages_note is not None
        ])
        

        
        # Traitement normal des notifications apr√®s sauvegarde
        if notes_saisies:
            # Cr√©er une notification pour l'admin qui a affect√© le dossier
            # Chercher l'admin qui a affect√© le dossier via l'historique
            historique_affectation = HistoriqueAction.objects.filter(
                dossier=dossier,
                action__icontains='affect√©'
            ).order_by('-date_action').first()
            
            # Si pas d'historique, chercher tous les admins
            if historique_affectation:
                admin_affecteur = historique_affectation.utilisateur
            else:
                # Fallback : chercher tous les admins
                admins = CustomUser.objects.filter(role='admin')
                admin_affecteur = admins.first() if admins.exists() else None
            
            if admin_affecteur:
                creer_notification(
                    destinataire=admin_affecteur,
                    type_notification='traitement',
                    titre=f"Dossier pr√™t pour validation : {dossier.titre}",
                    message=f"Le professeur {request.user.get_full_name() or request.user.username} a termin√© l'√©valuation du dossier '{dossier.titre}'. Score total : {consistance.note_totale}/100 points. Le dossier est pr√™t pour validation et transfert vers les dossiers trait√©s.",
                    dossier=dossier
                )
                
                messages.success(request, f"Consistance acad√©mique mise √† jour avec succ√®s. Notification envoy√©e √† l'administrateur pour validation.")
            else:
                messages.error(request, "Aucun administrateur trouv√© pour recevoir la notification.")
        else:
            messages.success(request, "Consistance acad√©mique mise √† jour avec succ√®s.")
            

        
        if evaluation_resultats['dossier_suffisant']:
            messages.success(request, "Tous les crit√®res obligatoires sont acquis.")
        else:
            criteres_non_acquis = ", ".join(evaluation_resultats['criteres_non_acquis'])
            messages.error(request, f"‚ö†Ô∏è CRIT√àRES OBLIGATOIRES NON ACQUIS : {criteres_non_acquis}. Le dossier sera automatiquement jug√© insuffisant m√™me avec un score total √©lev√© (76-100 points).")
        
        # Plus de traitement de retour admin ici - d√©j√† fait au d√©but
        
        return redirect('dossiers:dossier_detail', dossier_id=dossier_id)
    
    # √âvaluer les crit√®res obligatoires pour l'affichage
    evaluation_resultats = consistance.evaluer_criteres_obligatoires()
    
    # Interpr√©ter les r√©sultats globaux
    interpretation_globale = consistance.interpreter_resultats_globaux()
    
    # Comp√©tences par d√©faut pour les crit√®res fixes
    comp√©tences_sciences_geodesiques = [
        "Th√©orique et pratique de la g√©od√©sie",
        "Mesures g√©od√©siques",
        "Calculs g√©od√©siques"
    ]
    comp√©tences_topographie = [
        "Th√©orique et pratique de la topographie",
        "Topom√©trique et instrumentation",
        "Techniques de mensuration"
    ]
    comp√©tences_photogrammetrie = [
        "Base et approfondie de la photogramm√©trie",
        "Mise en place des photographies a√©riennes",
        "A√©rotriangulation",
        "Restitution photogramm√©trique",
        "G√©n√©ration de produits d√©riv√©s (MNT/Ortho)",
        "Drone"
    ]
    comp√©tences_cartographie = [
        "Th√©orique et pratique de la cartographie",
        "Techniques de cartographie",
        "Produits cartographiques"
    ]
    comp√©tences_droit_foncier = [
        "Droit foncier",
        "Cadastre",
        "Am√©nagements fonciers"
    ]
    comp√©tences_sig = [
        "Syst√®mes d'Information G√©ographique",
        "Applications SIG",
        "Analyse spatiale"
    ]
    comp√©tences_teledetection = [
        "T√©l√©d√©tection",
        "Traitement d'images",
        "Applications de t√©l√©d√©tection"
    ]
    
    # Cr√©er les listes de comp√©tences coch√©es bas√©es sur les champs bool√©ens du mod√®le
    sciences_geodesiques_competences_cochees = []
    if consistance.sciences_geodesie_geometrique:
        sciences_geodesiques_competences_cochees.append(0)
    if consistance.sciences_astronomie_geodesie_spatiale:
        sciences_geodesiques_competences_cochees.append(1)
    if consistance.sciences_geodesie_physique:
        sciences_geodesiques_competences_cochees.append(2)
    if consistance.sciences_ajustements_compensations:
        sciences_geodesiques_competences_cochees.append(3)
    if consistance.sciences_systemes_referentiels:
        sciences_geodesiques_competences_cochees.append(4)
    if consistance.sciences_projections_cartographiques:
        sciences_geodesiques_competences_cochees.append(5)
    if consistance.sciences_geodesie_appliquee:
        sciences_geodesiques_competences_cochees.append(6)
    if consistance.sciences_gnss:
        sciences_geodesiques_competences_cochees.append(7)
    if consistance.sciences_micro_geodesie:
        sciences_geodesiques_competences_cochees.append(8)

    topographie_competences_cochees = []
    if consistance.topographie_theorique_pratique:
        topographie_competences_cochees.append(0)
    if consistance.topographie_topometrique_instrumentation:
        topographie_competences_cochees.append(1)
    if consistance.topographie_techniques_mensuration:
        topographie_competences_cochees.append(2)

    photogrammetrie_competences_cochees = []
    if consistance.photogrammetrie_base_approfondie:
        photogrammetrie_competences_cochees.append(0)
    if consistance.photogrammetrie_photographies_aeriennes:
        photogrammetrie_competences_cochees.append(1)
    if consistance.photogrammetrie_aerotriangulation:
        photogrammetrie_competences_cochees.append(2)
    if consistance.photogrammetrie_restitution:
        photogrammetrie_competences_cochees.append(3)
    if consistance.photogrammetrie_produits_derives:
        photogrammetrie_competences_cochees.append(4)
    if consistance.photogrammetrie_drone:
        photogrammetrie_competences_cochees.append(5)

    cartographie_competences_cochees = []
    if consistance.cartographie_topographique:
        cartographie_competences_cochees.append(0)
    if consistance.cartographie_representation_cartographique:
        cartographie_competences_cochees.append(1)
    if consistance.cartographie_thematique:
        cartographie_competences_cochees.append(2)
    if consistance.cartographie_semiologie_langage:
        cartographie_competences_cochees.append(3)
    if consistance.cartographie_dao_cao:
        cartographie_competences_cochees.append(4)
    if consistance.cartographie_drone:
        cartographie_competences_cochees.append(5)

    droit_foncier_competences_cochees = []
    if consistance.droit_foncier_droit:
        droit_foncier_competences_cochees.append(0)
    if consistance.droit_foncier_techniques_cadastrales:
        droit_foncier_competences_cochees.append(1)
    if consistance.droit_foncier_gestion_amenagement:
        droit_foncier_competences_cochees.append(2)
    if consistance.droit_foncier_reglementations:
        droit_foncier_competences_cochees.append(3)

    sig_competences_cochees = []
    if consistance.sig_bases:
        sig_competences_cochees.append(0)
    if consistance.sig_gestion_analyse_donnees:
        sig_competences_cochees.append(1)
    if consistance.sig_bases_donnees_geographiques:
        sig_competences_cochees.append(2)
    if consistance.sig_web_mapping:
        sig_competences_cochees.append(3)

    teledetection_competences_cochees = []
    if consistance.teledetection_bases_physiques:
        teledetection_competences_cochees.append(0)
    if consistance.teledetection_traitement_images:
        teledetection_competences_cochees.append(1)
    if consistance.teledetection_applications:
        teledetection_competences_cochees.append(2)

    context = {
        'dossier': dossier,
        'consistance': consistance,
        'evaluation_resultats': evaluation_resultats,
        'user': request.user,
        'interpretation_globale': interpretation_globale,
        'structure': structure_globale,  # Ajouter la structure globale
        'comp√©tences_sciences_geodesiques': comp√©tences_sciences_geodesiques,
        'comp√©tences_topographie': comp√©tences_topographie,
        'comp√©tences_photogrammetrie': comp√©tences_photogrammetrie,
        'comp√©tences_cartographie': comp√©tences_cartographie,
        'comp√©tences_droit_foncier': comp√©tences_droit_foncier,
        'comp√©tences_sig': comp√©tences_sig,
        'comp√©tences_teledetection': comp√©tences_teledetection,
        'sciences_geodesiques_competences_cochees': sciences_geodesiques_competences_cochees,
        'topographie_competences_cochees': topographie_competences_cochees,
        'photogrammetrie_competences_cochees': photogrammetrie_competences_cochees,
        'cartographie_competences_cochees': cartographie_competences_cochees,
        'droit_foncier_competences_cochees': droit_foncier_competences_cochees,
        'sig_competences_cochees': sig_competences_cochees,
        'teledetection_competences_cochees': teledetection_competences_cochees,
    }
    
    return render(request, 'dossiers/consistance_academique.html', context)

@login_required
def traiter_dossier(request, dossier_id):
    """Traiter un dossier (changer le statut)"""
    dossier = get_object_or_404(Dossier, id=dossier_id)
    
    # V√©rifier les permissions
    if request.user.role == 'professeur' and dossier not in request.user.dossiers_attribues.all():
        messages.error(request, "Acc√®s non autoris√© √† ce dossier")
        return redirect('dossiers:professeur_dossiers')
    
    if request.method == 'POST':
        nouveau_statut = request.POST.get('statut')
        if nouveau_statut in dict(Dossier.STATUT_CHOICES):
            ancien_statut = dossier.statut
            dossier.statut = nouveau_statut
            dossier.save()
            
            # Cr√©er un historique
            HistoriqueAction.objects.create(
                dossier=dossier,
                utilisateur=request.user,
                action=f"Statut chang√© de {dict(Dossier.STATUT_CHOICES)[ancien_statut]} √† {dict(Dossier.STATUT_CHOICES)[nouveau_statut]}"
            )
            
            # Si le dossier passe en traitement et qu'il n'y a pas encore d'√©valuation
            try:
                candidat_existant = Candidat.objects.get(dossier=dossier)
                a_evaluation = True
            except Candidat.DoesNotExist:
                a_evaluation = False
            

            
            # Notifier l'administrateur si le dossier est trait√©
            if nouveau_statut == 'traite':
                # V√©rifier s'il y a une d√©cision ant√©rieure
                try:
                    candidat = dossier.candidat
                    etat_dossier = candidat.etat_dossier
                    a_decision_anterieure = etat_dossier.a_decision_anterieure
                    
                    if a_decision_anterieure:
                        # C'est un dossier avec d√©cision ant√©rieure qui a √©t√© retrait√©
                        message_notification = f"Le dossier '{dossier.titre}' a √©t√© retrait√© par {request.user.username} apr√®s une d√©cision ant√©rieure. Une nouvelle √©valuation compl√®te est disponible."
                        type_notif = 'retour'
                    else:
                        # C'est un nouveau dossier trait√©
                        message_notification = f"Le dossier '{dossier.titre}' a √©t√© trait√© par {request.user.username}."
                        type_notif = 'traitement'
                        
                except:
                    message_notification = f"Le dossier '{dossier.titre}' a √©t√© trait√© par {request.user.username}."
                    type_notif = 'traitement'
                
                admins = CustomUser.objects.filter(role='admin')
                for admin in admins:
                    creer_notification(
                        destinataire=admin,
                        type_notification=type_notif,
                        titre=f"Dossier trait√©",
                        message=message_notification,
                        dossier=dossier
                    )
            
            messages.success(request, "Statut du dossier mis √† jour")
            return redirect('dossiers:dossier_detail', dossier_id=dossier.id)
    
    context = {
        'dossier': dossier,
        'statuts': Dossier.STATUT_CHOICES,
    }
    return render(request, 'dossiers/traiter_dossier.html', context)

@login_required
def ajouter_rapport(request, dossier_id):
    """Ajouter un rapport d'analyse"""
    dossier = get_object_or_404(Dossier, id=dossier_id)
    
    # V√©rifier les permissions
    if request.user.role == 'professeur' and dossier not in request.user.dossiers_attribues.all():
        messages.error(request, "Acc√®s non autoris√© √† ce dossier")
        return redirect('dossiers:professeur_dossiers')
    
    if request.method == 'POST':
        titre = request.POST.get('titre')
        contenu = request.POST.get('contenu')
        type_rapport = request.POST.get('type_rapport', 'autre')
        document = request.FILES.get('document')
        
        # Validation
        if not titre or len(titre.strip()) < 5:
            messages.error(request, "Le titre doit contenir au moins 5 caract√®res")
            context = {
                'dossier': dossier,
                'form': {'titre': {'value': titre}, 'contenu': {'value': contenu}, 'type_rapport': {'value': type_rapport}}
            }
            return render(request, 'dossiers/ajouter_rapport.html', context)
        
        if not contenu or len(contenu.strip()) < 50:
            messages.error(request, "Le contenu du rapport doit contenir au moins 50 caract√®res")
            context = {
                'dossier': dossier,
                'form': {'titre': {'value': titre}, 'contenu': {'value': contenu}, 'type_rapport': {'value': type_rapport}}
            }
            return render(request, 'dossiers/ajouter_rapport.html', context)
        
        # Cr√©er ou mettre √† jour le rapport
        rapport, created = RapportAnalyse.objects.get_or_create(
            dossier=dossier,
            defaults={
                'auteur': request.user,
                'titre': titre,
                'contenu': contenu,
                'type_rapport': type_rapport
            }
        )
        
        if not created:
            rapport.titre = titre
            rapport.contenu = contenu
            rapport.type_rapport = type_rapport
            rapport.auteur = request.user
        
        if document:
            rapport.document = document
        
        rapport.save()
        
        # Cr√©er un historique
        HistoriqueAction.objects.create(
            dossier=dossier,
            utilisateur=request.user,
            action=f"Rapport d'analyse '{titre}' ajout√©/modifi√©"
        )
        
        messages.success(request, f"Rapport d'analyse '{titre}' enregistr√© avec succ√®s")
        return redirect('dossiers:dossier_detail', dossier_id=dossier.id)
    
    context = {
        'dossier': dossier,
        'form': {}
    }
    return render(request, 'dossiers/ajouter_rapport.html', context)

@login_required
def evaluation_equivalence(request, dossier_id):
    """Vue pour afficher l'√©valuation d'√©quivalence d'un dossier"""
    dossier = get_object_or_404(Dossier, id=dossier_id)
    
    # Les administrateurs peuvent voir l'√©valuation mais pas la modifier
    # Les professeurs ont acc√®s complet
    pass
    
    # V√©rifier si une consistance acad√©mique existe ET a des notes
    try:
        candidat = dossier.candidat
        # UTILISER LA M√äME LOGIQUE que consistance_academique pour √©viter les probl√®mes de cache
        consistance = ConsistanceAcademique.objects.get(candidat=candidat)
        # FORCER le rechargement depuis la base de donn√©es pour avoir les derni√®res donn√©es
        consistance.refresh_from_db()
        
        # V√©rifier si au moins une note a √©t√© saisie (incluant tous les crit√®res)
        has_notes = (consistance.sciences_geodesiques_note is not None or 
                    consistance.topographie_note is not None or 
                    consistance.photogrammetrie_note is not None or 
                    consistance.cartographie_note is not None or
                    consistance.droit_foncier_note is not None or
                    consistance.sig_note is not None or
                    consistance.teledetection_note is not None or
                    consistance.stages_note is not None)
        
        # V√©rifier les crit√®res personnalis√©s
        has_custom_notes = False
        if len(consistance.criteres_personnalises) > 0:
            for critere in consistance.criteres_personnalises:
                if critere.get('note') is not None:
                    has_custom_notes = True
                    break
        
        # Si une consistance acad√©mique existe, permettre l'acc√®s (pour admin ET professeur)
        # Plus besoin de v√©rifier les notes strictement - si consistance existe, l'√©valuation existe
        pass  # Continuer vers l'affichage
            
    except (Candidat.DoesNotExist, ConsistanceAcademique.DoesNotExist):
        messages.error(request, "Aucune √©valuation trouv√©e pour ce dossier. Vous devez d'abord effectuer le traitement du dossier.")
        return redirect('dossiers:dossier_detail', dossier_id=dossier_id)
    
    # G√©rer la soumission des commentaires de la commission
    if request.method == 'POST':
        commentaires = request.POST.get('commentaires_commission', '')
        decision_type = request.POST.get('decision_type', '')
        
        try:
            candidat = dossier.candidat
            
            # Cr√©er ou mettre √† jour la d√©cision de la commission
            decision_commission, created = DecisionCommission.objects.get_or_create(
                candidat=candidat,
                defaults={
                    'score_total': candidat.consistance_academique.note_totale,
                    'decision': decision_type,
                    'recommandations': 'Recommandations bas√©es sur l\'√©valuation',
                    'commentaires': commentaires
                }
            )
            
            if not created:
                decision_commission.commentaires = commentaires
                if decision_type:
                    decision_commission.decision = decision_type
                decision_commission.save()
            
            messages.success(request, "Commentaires de la commission enregistr√©s avec succ√®s")
            return redirect('dossiers:evaluation_equivalence', dossier_id=dossier_id)
            
        except Exception as e:
            messages.error(request, f"Erreur lors de l'enregistrement : {str(e)}")
    
    try:
        candidat = dossier.candidat
        # Recharger explicitement la consistance depuis la base de donn√©es
        consistance = ConsistanceAcademique.objects.select_related('candidat').get(candidat=candidat)
        consistance.refresh_from_db()  # Force le rechargement
        
        # DEBUG TEMPORAIRE - V√©rifier ce qui est vraiment dans la DB
        print(f"=== DEBUG DB === ID: {consistance.id}")
        print(f"Sciences: {consistance.sciences_geodesiques_note}")
        print(f"Topo: {consistance.topographie_note}")
        print(f"Photo: {consistance.photogrammetrie_note}")
        print(f"Carto: {consistance.cartographie_note}")
        print(f"Note totale: {consistance.note_totale}")
        print("===================")
        

        
        # R√©cup√©rer l'interpr√©tation globale
        interpretation_globale = consistance.interpreter_resultats_globaux()
        
        # R√©cup√©rer l'√©valuation des crit√®res obligatoires
        evaluation_criteres = consistance.evaluer_criteres_obligatoires()
        
        # Pr√©parer les donn√©es pour l'affichage
        donnees_evaluation = []
        
        # REQU√äTE DIRECTE - Utiliser candidat_id pour √™tre absolument s√ªr
        from django.db import connection
        with connection.cursor() as cursor:
            cursor.execute("""
                SELECT sciences_geodesiques_note, topographie_note, photogrammetrie_note, 
                       cartographie_note, droit_foncier_note, sig_note, teledetection_note, stages_note
                FROM dossiers_consistanceacademique 
                WHERE candidat_id = %s
            """, [candidat.id])
            
            row = cursor.fetchone()
            
            if row:
                sciences_note, topo_note, photo_note, carto_note, droit_note, sig_note, tele_note, stages_note = row
            else:
                sciences_note = topo_note = photo_note = carto_note = droit_note = sig_note = tele_note = stages_note = 0
        

        
        # Utiliser les valeurs de la requ√™te directe
        donnees_evaluation.append({
            'critere': 'Sciences g√©od√©siques',
            'note': sciences_note or 0,
            'note_max': 16,
            'commentaires': consistance.sciences_geodesiques_commentaires or '',
            'acquis': (sciences_note or 0) >= 8  # 50% de 16
        })
        
        donnees_evaluation.append({
            'critere': 'Topographie', 
            'note': topo_note or 0,
            'note_max': 16,
            'commentaires': consistance.topographie_commentaires or '',
            'acquis': (topo_note or 0) >= 8
        })
        
        donnees_evaluation.append({
            'critere': 'Photogramm√©trie',
            'note': photo_note or 0,
            'note_max': 16,
            'commentaires': consistance.photogrammetrie_commentaires or '',
            'acquis': (photo_note or 0) >= 8
        })
        
        donnees_evaluation.append({
            'critere': 'Cartographie',
            'note': carto_note or 0,
            'note_max': 16,
            'commentaires': consistance.cartographie_commentaires or '',
            'acquis': (carto_note or 0) >= 8
        })
        
        donnees_evaluation.append({
            'critere': 'Droit foncier',
            'note': droit_note or 0,
            'note_max': 10,
            'commentaires': consistance.droit_foncier_commentaires or '',
            'acquis': (droit_note or 0) >= 5
        })
        
        donnees_evaluation.append({
            'critere': 'SIG',
            'note': sig_note or 0,
            'note_max': 10,
            'commentaires': consistance.sig_commentaires or '',
            'acquis': True  # Non obligatoire
        })
        
        donnees_evaluation.append({
            'critere': 'T√©l√©d√©tection',
            'note': tele_note or 0,
            'note_max': 10,
            'commentaires': consistance.teledetection_commentaires or '',
            'acquis': True  # Non obligatoire
        })
        
        donnees_evaluation.append({
            'critere': 'Stages et professionnalisation',
            'note': stages_note or 0,
            'note_max': 10,
            'commentaires': consistance.stages_commentaires or '',
            'acquis': True  # Non obligatoire
        })
        
        # Crit√®res personnalis√©s
        for critere_perso in consistance.criteres_personnalises:
            if critere_perso.get('nom'):
                donnees_evaluation.append({
                    'critere': critere_perso.get('nom'),
                    'note': critere_perso.get('note', 0),
                    'note_max': critere_perso.get('note_max', 0),
                    'commentaires': critere_perso.get('commentaires', ''),
                    'acquis': True
                })
        
        # Recalculer la note totale depuis la DB
        note_totale_reelle = (sciences_note or 0) + (topo_note or 0) + (photo_note or 0) + (carto_note or 0) + (droit_note or 0) + (sig_note or 0) + (tele_note or 0) + (stages_note or 0)
        
        # Ajouter les notes des crit√®res personnalis√©s
        for critere_perso in consistance.criteres_personnalises:
            if critere_perso.get('note'):
                note_totale_reelle += critere_perso.get('note', 0)
        
        # R√©cup√©rer la d√©cision de la commission existante
        decision_commission = None
        
        # R√©cup√©rer l'√©tat du dossier pour v√©rifier s'il y a une d√©cision ant√©rieure
        try:
            etat_dossier = candidat.etat_dossier
            # MASQUER la d√©cision ant√©rieure si il y a une nouvelle √©valuation
            if consistance and note_totale_reelle > 0:
                # Il y a une nouvelle √©valuation, masquer la d√©cision ant√©rieure
                a_decision_anterieure = False
                decision_anterieure = ""
                date_decision_anterieure = None
            else:
                # Pas de nouvelle √©valuation, montrer la d√©cision ant√©rieure
                a_decision_anterieure = etat_dossier.a_decision_anterieure
                decision_anterieure = etat_dossier.decision_anterieure
                date_decision_anterieure = etat_dossier.date_decision_anterieure
        except:
            a_decision_anterieure = False
            decision_anterieure = ""
            date_decision_anterieure = None
        try:
            decision_commission = candidat.decision
        except DecisionCommission.DoesNotExist:
            pass
        
        # R√©cup√©rer la structure globale pour les stages configurables
        try:
            structure_globale = StructureEvaluationGlobale.objects.first()
            if not structure_globale:
                structure_globale = StructureEvaluationGlobale.objects.create()
        except Exception:
            structure_globale = None
        
        context = {
            'dossier': dossier,
            'candidat': candidat,
            'consistance': consistance,
            'structure': structure_globale,
            'interpretation_globale': interpretation_globale,
            'evaluation_criteres': evaluation_criteres,
            'donnees_evaluation': donnees_evaluation,
            'note_totale': note_totale_reelle,  # Utiliser la note recalcul√©e depuis la DB
            'decision_commission': decision_commission,
            'a_decision_anterieure': a_decision_anterieure,
            'decision_anterieure': decision_anterieure,
            'date_decision_anterieure': date_decision_anterieure,
        }
        return render(request, 'dossiers/evaluation_equivalence.html', context)
    except Candidat.DoesNotExist:
        messages.error(request, "Aucune √©valuation d'√©quivalence trouv√©e pour ce dossier")
        return redirect('dossiers:dossier_detail', dossier_id=dossier_id)

@login_required
def creer_evaluation(request, dossier_id):
    """Vue pour cr√©er une √©valuation d'√©quivalence"""
    if request.user.role != 'professeur':
        messages.error(request, "Seuls les professeurs peuvent cr√©er des √©valuations")
        return redirect('dossiers:dossier_detail', dossier_id=dossier_id)
    
    dossier = get_object_or_404(Dossier, id=dossier_id)
    
    # V√©rifier si un candidat existe d√©j√† pour ce dossier
    try:
        candidat_existant = Candidat.objects.get(dossier=dossier)
        messages.warning(request, "Une √©valuation existe d√©j√† pour ce dossier")
        return redirect('dossiers:evaluation_equivalence', dossier_id=dossier_id)
    except Candidat.DoesNotExist:
        pass
    
    if request.method == 'POST':
        # Cr√©er le candidat
        candidat = Candidat.objects.create(
            dossier=dossier,
            nom=request.POST.get('nom'),
            date_arrivee=request.POST.get('date_arrivee'),
            pays_origine=request.POST.get('pays_origine')
        )
        
        # Cr√©er les dipl√¥mes
        diplomes_data = request.POST.getlist('diplome_nom')
        annees_data = request.POST.getlist('diplome_annee')
        universites_data = request.POST.getlist('diplome_universite')
        pays_data = request.POST.getlist('diplome_pays')
        durees_data = request.POST.getlist('diplome_duree')
        
        for i in range(len(diplomes_data)):
            if diplomes_data[i]:
                Diplome.objects.create(
                    candidat=candidat,
                    nom=diplomes_data[i],
                    annee=annees_data[i],
                    universite=universites_data[i],
                    pays=pays_data[i],
                    duree=durees_data[i]
                )
        
        # Cr√©er les pi√®ces manquantes
        pieces_manquantes = request.POST.getlist('piece_manquante')
        for piece in pieces_manquantes:
            if piece:
                PieceManquante.objects.create(
                    candidat=candidat,
                    description=piece
                )
        
        # Cr√©er les √©valuations de comp√©tences
        competences = Competence.objects.all()
        for competence in competences:
            note = request.POST.get(f'note_{competence.id}')
            if note:
                EvaluationCompetence.objects.create(
                    candidat=candidat,
                    competence=competence,
                    note=int(note),
                    commentaires=request.POST.get(f'commentaire_{competence.id}', '')
                )
        
        # √âvaluer le candidat
        decision = evaluer_candidat(candidat.id)
        
        messages.success(request, f"√âvaluation cr√©√©e avec succ√®s. Score: {decision.score_total}, D√©cision: {decision.get_decision_display()}")
        return redirect('dossiers:evaluation_equivalence', dossier_id=dossier_id)
    
    # R√©cup√©rer les comp√©tences pour le formulaire
    competences = Competence.objects.all()
    
    context = {
        'dossier': dossier,
        'competences': competences,
    }
    return render(request, 'dossiers/creer_evaluation.html', context)

@login_required
def exporter_evaluation_pdf(request, dossier_id):
    """Exporter l'√©valuation d'√©quivalence en PDF"""
    dossier = get_object_or_404(Dossier, id=dossier_id)
    
    try:
        candidat = Candidat.objects.get(dossier=dossier)
        try:
            decision = DecisionCommission.objects.get(candidat=candidat)
        except DecisionCommission.DoesNotExist:
            messages.error(request, "Aucune d√©cision trouv√©e pour ce dossier")
            return redirect('dossiers:dossier_detail', dossier_id=dossier.id)
    except Candidat.DoesNotExist:
        messages.error(request, "Aucune √©valuation trouv√©e pour ce dossier")
        return redirect('dossiers:dossier_detail', dossier_id=dossier.id)
    
    candidat = dossier.candidat
    decision = candidat.decision
    
    # Cr√©er le PDF
    response = HttpResponse(content_type='application/pdf')
    response['Content-Disposition'] = f'attachment; filename="evaluation_{candidat.nom}_{timezone.now().strftime("%Y%m%d")}.pdf"'
    
    # Cr√©er le document PDF
    doc = SimpleDocTemplate(response, pagesize=A4)
    styles = getSampleStyleSheet()
    story = []
    
    # Titre
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=16,
        spaceAfter=30,
        alignment=1  # Centr√©
    )
    story.append(Paragraph("RAPPORT D'√âVALUATION D'√âQUIVALENCE", title_style))
    story.append(Spacer(1, 20))
    
    # Informations du candidat
    story.append(Paragraph("INFORMATIONS DU CANDIDAT", styles['Heading2']))
    story.append(Spacer(1, 12))
    
    candidat_data = [
        ['Nom:', candidat.nom],
        ['Pays d\'origine:', candidat.pays_origine],
        ['Date d\'arriv√©e:', candidat.date_arrivee.strftime("%d/%m/%Y")],
        ['Dossier:', dossier.titre]
    ]
    
    candidat_table = Table(candidat_data, colWidths=[2*inch, 4*inch])
    candidat_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (0, -1), colors.grey),
        ('TEXTCOLOR', (0, 0), (0, -1), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('FONTNAME', (0, 0), (-1, -1), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, -1), 10),
        ('BOTTOMPADDING', (0, 0), (-1, -1), 12),
        ('BACKGROUND', (1, 0), (1, -1), colors.beige),
        ('GRID', (0, 0), (-1, -1), 1, colors.black)
    ]))
    story.append(candidat_table)
    story.append(Spacer(1, 20))
    
    # Dipl√¥mes
    if candidat.diplomes.exists():
        story.append(Paragraph("DIPL√îMES", styles['Heading2']))
        story.append(Spacer(1, 12))
        
        diplome_headers = ['Dipl√¥me', 'Ann√©e', 'Universit√©', 'Pays', 'Dur√©e']
        diplome_data = [diplome_headers]
        
        for diplome in candidat.diplomes.all():
            diplome_data.append([
                diplome.nom,
                str(diplome.annee),
                diplome.universite,
                diplome.pays,
                f"{diplome.duree} ans"
            ])
        
        diplome_table = Table(diplome_data, colWidths=[1.5*inch, 0.8*inch, 1.5*inch, 1*inch, 0.8*inch])
        diplome_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, -1), 8),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 6),
            ('GRID', (0, 0), (-1, -1), 1, colors.black)
        ]))
        story.append(diplome_table)
        story.append(Spacer(1, 20))
    
    # √âvaluations des comp√©tences
    if candidat.evaluations.exists():
        story.append(Paragraph("√âVALUATION DES COMP√âTENCES", styles['Heading2']))
        story.append(Spacer(1, 12))
        
        eval_headers = ['Comp√©tence', 'Poids', 'Note', 'Points obtenus', 'Commentaires']
        eval_data = [eval_headers]
        
        for evaluation in candidat.evaluations.all():
            eval_data.append([
                evaluation.competence.nom,
                str(evaluation.competence.poids),
                str(evaluation.note),
                str(evaluation.points_obtenus),
                evaluation.commentaires[:50] + "..." if len(evaluation.commentaires) > 50 else evaluation.commentaires
            ])
        
        eval_table = Table(eval_data, colWidths=[1.5*inch, 0.6*inch, 0.6*inch, 1*inch, 2*inch])
        eval_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, -1), 8),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 6),
            ('GRID', (0, 0), (-1, -1), 1, colors.black)
        ]))
        story.append(eval_table)
        story.append(Spacer(1, 20))
    
    # R√©sultats
    story.append(Paragraph("R√âSULTATS", styles['Heading2']))
    story.append(Spacer(1, 12))
    
    result_data = [
        ['Score total:', f"{decision.score_total}/100"],
        ['Interpr√©tation:', decision.interpretation_score],
        ['D√©cision:', dict(DecisionCommission.DECISION_CHOICES)[decision.decision]],
        ['Date de d√©cision:', decision.date_decision.strftime("%d/%m/%Y")]
    ]
    
    result_table = Table(result_data, colWidths=[2*inch, 4*inch])
    result_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (0, -1), colors.grey),
        ('TEXTCOLOR', (0, 0), (0, -1), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('FONTNAME', (0, 0), (-1, -1), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, -1), 10),
        ('BOTTOMPADDING', (0, 0), (-1, -1), 12),
        ('BACKGROUND', (1, 0), (1, -1), colors.beige),
        ('GRID', (0, 0), (-1, -1), 1, colors.black)
    ]))
    story.append(result_table)
    story.append(Spacer(1, 20))
    
    # Recommandations
    if decision.recommandations:
        story.append(Paragraph("RECOMMANDATIONS", styles['Heading2']))
        story.append(Spacer(1, 12))
        story.append(Paragraph(decision.recommandations, styles['Normal']))
        story.append(Spacer(1, 20))
    
    # Commentaires
    if decision.commentaires:
        story.append(Paragraph("COMMENTAIRES", styles['Heading2']))
        story.append(Spacer(1, 12))
        story.append(Paragraph(decision.commentaires, styles['Normal']))
    
    # G√©n√©rer le PDF
    doc.build(story)
    return response

def test_media_file(request):
    """Vue de test pour v√©rifier l'acc√®s aux fichiers m√©dias"""
    file_path = os.path.join(settings.MEDIA_ROOT, 'pieces_jointes', 'ND-NP_AAAA_CANDIDAT_Pays.docx')
    
    if os.path.exists(file_path):
        try:
            with open(file_path, 'rb') as f:
                response = HttpResponse(f.read(), content_type='application/vnd.openxmlformats-officedocument.wordprocessingml.document')
                response['Content-Disposition'] = 'inline; filename="ND-NP_AAAA_CANDIDAT_Pays.docx"'
                return response
        except Exception as e:
            return HttpResponse(f"Erreur lors de la lecture du fichier: {str(e)}")
    else:
        return HttpResponse(f"Fichier non trouv√© √†: {file_path}")

def serve_piece_jointe(request, filename):
    """Vue pour servir les pi√®ces jointes avec l'URL personnalis√©e"""
    file_path = os.path.join(settings.MEDIA_ROOT, 'pieces_jointes', filename)
    
    if os.path.exists(file_path):
        try:
            with open(file_path, 'rb') as f:
                # D√©terminer le type MIME bas√© sur l'extension
                if filename.endswith('.docx'):
                    content_type = 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
                elif filename.endswith('.pdf'):
                    content_type = 'application/pdf'
                elif filename.endswith('.jpg') or filename.endswith('.jpeg'):
                    content_type = 'image/jpeg'
                elif filename.endswith('.png'):
                    content_type = 'image/png'
                else:
                    content_type = 'application/octet-stream'
                
                response = HttpResponse(f.read(), content_type=content_type)
                response['Content-Disposition'] = f'inline; filename="{filename}"'
                return response
        except Exception as e:
            return HttpResponse(f"Erreur lors de la lecture du fichier: {str(e)}", status=500)
    else:
        return HttpResponse(f"Fichier non trouv√©: {filename}", status=404)

@login_required
def dossiers_traites_admin(request):
    """Interface admin pour g√©rer les dossiers d√©j√† trait√©s"""
    if request.user.role != 'admin':
        messages.error(request, "Acc√®s non autoris√©")
        return redirect('dossiers:dashboard')
    
    # R√©cup√©rer tous les dossiers trait√©s depuis DossierTraite (le bon mod√®le)
    dossiers_traites = DossierTraite.objects.all().order_by('-date_creation')
    
    # Filtrage
    recherche = request.GET.get('recherche', '')
    pays_filter = request.GET.get('pays', '')
    universite_filter = request.GET.get('universite', '')
    
    if recherche:
        dossiers_traites = dossiers_traites.filter(
            Q(demandeur_candidat__icontains=recherche) |
            Q(numero__icontains=recherche) |
            Q(reference__icontains=recherche) |
            Q(diplome__icontains=recherche)
        )
    
    if pays_filter:
        dossiers_traites = dossiers_traites.filter(pays__icontains=pays_filter)
    
    if universite_filter:
        dossiers_traites = dossiers_traites.filter(universite__icontains=universite_filter)
    
    # Pagination
    paginator = Paginator(dossiers_traites, 20)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)
    
    # Statistiques
    total_dossiers = DossierTraite.objects.count()
    pays_uniques = DossierTraite.objects.values_list('pays', flat=True).distinct()
    universites_uniques = DossierTraite.objects.values_list('universite', flat=True).distinct()
    
    context = {
        'page_obj': page_obj,
        'total_dossiers': total_dossiers,
        'pays_uniques': pays_uniques,
        'universites_uniques': universites_uniques,
        'recherche': recherche,
        'pays_filter': pays_filter,
        'universite_filter': universite_filter,
    }
    
    return render(request, 'dossiers/dossiers_traites_admin.html', context)

@login_required
def voir_details_traitement(request, dossier_traite_id):
    """Vue pour voir les d√©tails du traitement d'un dossier trait√©"""
    if request.user.role != 'admin':
        messages.error(request, "Acc√®s non autoris√©")
        return redirect('dossiers:dashboard')
    
    dossier_traite = get_object_or_404(DossierTraite, id=dossier_traite_id)
    
    # Essayer de trouver le dossier original et sa consistance acad√©mique
    dossier_original = None
    consistance = None
    candidat = None
    
    try:
        # Chercher le dossier original par le num√©ro (correspondance exacte)
        dossier_original = Dossier.objects.filter(titre=dossier_traite.numero).first()
        
        # Si pas trouv√©, essayer une recherche plus large
        if not dossier_original:
            # Chercher par num√©ro dans le titre
            dossier_original = Dossier.objects.filter(titre__icontains=dossier_traite.numero).first()
        
        # Si toujours pas trouv√©, essayer par le nom du candidat
        if not dossier_original:
            try:
                candidat_temp = Candidat.objects.filter(nom__icontains=dossier_traite.demandeur_candidat).first()
                if candidat_temp:
                    dossier_original = candidat_temp.dossier
            except:
                pass
        
        # Si toujours pas trouv√©, chercher dans tous les dossiers avec consistance
        if not dossier_original:
            try:
                # Chercher tous les candidats avec consistance
                candidats_avec_consistance = Candidat.objects.filter(
                    consistance_academique__isnull=False
                )
                for candidat_temp in candidats_avec_consistance:
                    if candidat_temp.nom and dossier_traite.demandeur_candidat:
                        if candidat_temp.nom.lower() in dossier_traite.demandeur_candidat.lower() or dossier_traite.demandeur_candidat.lower() in candidat_temp.nom.lower():
                            dossier_original = candidat_temp.dossier
                            break
            except Exception as e:
                print(f"Erreur lors de la recherche par nom: {e}")
        
        print(f"Recherche dossier original: {dossier_traite.numero}")
        print(f"Dossier trouv√©: {dossier_original}")
        
        if dossier_original:
            try:
                candidat = Candidat.objects.get(dossier=dossier_original)
                print(f"Candidat trouv√©: {candidat.nom}")
                try:
                    consistance = ConsistanceAcademique.objects.get(candidat=candidat)
                    print(f"Consistance trouv√©e: {consistance.note_totale}/100")
                except ConsistanceAcademique.DoesNotExist:
                    print(f"Aucune consistance acad√©mique trouv√©e pour le candidat {candidat.id}")
            except Candidat.DoesNotExist:
                print(f"Aucun candidat trouv√© pour le dossier {dossier_original.id}")
        else:
            print(f"Aucun dossier original trouv√© pour le num√©ro: {dossier_traite.numero}")
            
    except Exception as e:
        print(f"Erreur lors de la r√©cup√©ration des d√©tails : {e}")
    
    # Si pas de consistance trouv√©e, essayer d'extraire les notes de l'avis de la commission
    if not consistance and dossier_traite.avis_commission:
        try:
            # Cr√©er un objet temporaire pour afficher les notes extraites de l'avis
            class ConsistanceTemporaire:
                def __init__(self, avis_commission):
                    self.avis_commission = avis_commission
                    self.note_totale = 0
                    # Extraire les notes de l'avis
                    import re
                    notes = re.findall(r'(\w+): (\d+)/(\d+)', avis_commission)
                    for critere, note, max_note in notes:
                        setattr(self, f"{critere.lower()}_note", int(note))
                        if critere.lower() in ['sciences', 'topographie', 'photogrammetrie', 'cartographie']:
                            self.note_totale += int(note)
                        elif critere.lower() in ['droit', 'sig', 'teledetection', 'stages']:
                            self.note_totale += int(note)
                    
                    # Extraire le score total
                    score_match = re.search(r'Score total : (\d+)/100', avis_commission)
                    if score_match:
                        self.note_totale = int(score_match.group(1))
                
                def __getattr__(self, name):
                    return None
            
            consistance = ConsistanceTemporaire(dossier_traite.avis_commission)
            print(f"Notes extraites de l'avis: {consistance.note_totale}/100")
        except Exception as e:
            print(f"Erreur lors de l'extraction des notes: {e}")
    
    # D√©tecter si on doit afficher la d√©cision ant√©rieure ou les nouvelles notes
    afficher_decision_anterieure = False
    if candidat and hasattr(candidat, 'etat_dossier') and candidat.etat_dossier:
        if candidat.etat_dossier.a_decision_anterieure:
            # Si il y a une d√©cision ant√©rieure ET une nouvelle √©valuation, afficher les nouvelles notes
            if consistance:
                afficher_decision_anterieure = False  # Afficher les nouvelles notes
            else:
                afficher_decision_anterieure = True   # Afficher l'ancienne d√©cision
    
    context = {
        'dossier_traite': dossier_traite,
        'dossier_original': dossier_original,
        'consistance': consistance,
        'candidat': candidat,
        'afficher_decision_anterieure': afficher_decision_anterieure,
    }
    
    return render(request, 'dossiers/voir_details_traitement.html', context)

@login_required
def valider_et_transferer_dossier(request, dossier_id):
    """Vue pour que l'admin valide et transf√®re un dossier vers les dossiers trait√©s"""
    if request.user.role != 'admin':
        messages.error(request, "Acc√®s non autoris√©")
        return redirect('dossiers:dashboard')
    
    dossier = get_object_or_404(Dossier, id=dossier_id)
    candidat = get_object_or_404(Candidat, dossier=dossier)
    consistance = get_object_or_404(ConsistanceAcademique, candidat=candidat)
    
    if request.method == 'POST':
        try:
            # V√©rifier si un dossier trait√© existe d√©j√†
            dossier_traite_existant = DossierTraite.objects.filter(numero=dossier.titre).first()
            
            if not dossier_traite_existant:
                # Cr√©er le dossier trait√© avec les donn√©es de l'√©valuation
                dossier_traite = DossierTraite.objects.create(
                    numero=dossier.titre,
                    demandeur_candidat=candidat.nom,
                    reference=dossier.titre,
                    date_envoi=dossier.date_reception,
                    date_reception=dossier.date_reception,
                    diplome="Dipl√¥me √©valu√©",
                    universite="autre",
                    pays=candidat.pays_origine,
                    avis_commission=f"√âvaluation termin√©e. Score total : {consistance.note_totale}/100 points. Notes d√©taill√©es : Sciences g√©od√©siques: {consistance.sciences_geodesiques_note or 0}/16, Topographie: {consistance.topographie_note or 0}/16, Photogramm√©trie: {consistance.photogrammetrie_note or 0}/16, Cartographie: {consistance.cartographie_note or 0}/16, Droit foncier: {consistance.droit_foncier_note or 0}/10, SIG: {consistance.sig_note or 0}/10, T√©l√©d√©tection: {consistance.teledetection_note or 0}/10, Stages: {consistance.stages_note or 0}/10.",
                    date_avis=timezone.now().date(),
                    cree_par=request.user
                )
                
                # Marquer le dossier comme trait√©
                dossier.statut = 'traite'
                dossier.save()
                
                # Notifier le professeur que le dossier a √©t√© valid√©
                professeurs = dossier.professeurs.filter(role='professeur')
                for professeur in professeurs:
                    creer_notification(
                        destinataire=professeur,
                        type_notification='validation',
                        titre=f"Dossier valid√© : {dossier.titre}",
                        message=f"L'administrateur {request.user.get_full_name() or request.user.username} a valid√© et transf√©r√© votre √©valuation du dossier '{dossier.titre}' vers les dossiers trait√©s.",
                        dossier=dossier
                    )
                
                messages.success(request, f"Dossier '{dossier.titre}' valid√© et transf√©r√© vers les dossiers trait√©s avec succ√®s.")
                return redirect('dossiers:dossiers_traites_admin')
            else:
                messages.warning(request, f"Le dossier '{dossier.titre}' √©tait d√©j√† dans les dossiers trait√©s.")
                return redirect('dossiers:dossiers_traites_admin')
                
        except Exception as e:
            messages.error(request, f"Erreur lors du transfert : {str(e)}")
    
    context = {
        'dossier': dossier,
        'candidat': candidat,
        'consistance': consistance,
    }
    
    return render(request, 'dossiers/valider_et_transferer_dossier.html', context)

@login_required
def renvoyer_au_professeur(request, dossier_id):
    """Vue pour que l'admin renvoie un dossier au professeur"""
    if request.user.role != 'admin':
        messages.error(request, "Acc√®s non autoris√©")
        return redirect('dossiers:dashboard')
    
    dossier = get_object_or_404(Dossier, id=dossier_id)
    candidat = get_object_or_404(Candidat, dossier=dossier)
    
    if request.method == 'POST':
        message_admin = request.POST.get('message_admin', '')
        
        # V√©rifier si le dossier a une d√©cision ant√©rieure
        try:
            etat_dossier = candidat.etat_dossier
            if etat_dossier.a_decision_anterieure:
                # Marquer que le dossier a √©t√© examin√© par l'admin
                etat_dossier.pieces_demandees = f"Examin√© par l'admin le {timezone.now().date()}. {message_admin}"
                etat_dossier.save()
                
                # R√âINITIALISER compl√®tement l'√©valuation pour la r√©√©valuation
                try:
                    # Supprimer l'ancienne consistance acad√©mique
                    if hasattr(candidat, 'consistance_academique') and candidat.consistance_academique:
                        candidat.consistance_academique.delete()
                        print(f"‚úÖ Ancienne consistance acad√©mique supprim√©e pour le dossier {dossier.id}")
                    
                    # Supprimer l'ancienne d√©cision de commission
                    if hasattr(candidat, 'decision') and candidat.decision:
                        candidat.decision.delete()
                        print(f"‚úÖ Ancienne d√©cision de commission supprim√©e pour le dossier {dossier.id}")
                        
                except Exception as e:
                    print(f"‚ö†Ô∏è Erreur lors de la suppression de l'ancienne √©valuation: {e}")
                    
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur lors de la v√©rification de l'√©tat du dossier: {e}")
            pass
        
        # Changer le statut du dossier pour permettre au professeur de le retraiter
        dossier.statut = 'en_cours'
        dossier.save()
        
        # Cr√©er un historique de l'action
        HistoriqueAction.objects.create(
            dossier=dossier,
            utilisateur=request.user,
            action=f"Dossier renvoy√© au professeur par l'administrateur. Message : {message_admin}"
        )
        
        # Notifier le professeur
        professeurs = dossier.professeurs.filter(role='professeur')
        for professeur in professeurs:
            creer_notification(
                destinataire=professeur,
                type_notification='renvoi',
                titre=f"Dossier renvoy√© : {dossier.titre}",
                message=f"L'administrateur {request.user.get_full_name() or request.user.username} a renvoy√© le dossier '{dossier.titre}' pour traitement. Message : {message_admin}",
                dossier=dossier
            )
        
        messages.success(request, f"Dossier '{dossier.titre}' renvoy√© au professeur avec succ√®s.")
        return redirect('dossiers:dossier_detail', dossier_id=dossier_id)
    
    context = {
        'dossier': dossier,
        'candidat': candidat,
    }
    
    return render(request, 'dossiers/renvoyer_au_professeur.html', context)

@login_required
def renvoyer_dossier_traite_au_professeur(request, dossier_traite_id):
    """Vue pour que l'admin renvoie un dossier trait√© au professeur"""
    if request.user.role != 'admin':
        messages.error(request, "Acc√®s non autoris√©")
        return redirect('dossiers:dashboard')
    
    dossier_traite = get_object_or_404(DossierTraite, id=dossier_traite_id)
    
    if request.method == 'POST':
        message_admin = request.POST.get('message_admin', '')
        
        # Cr√©er un nouveau dossier en cours √† partir du dossier trait√©
        nouveau_dossier = Dossier.objects.create(
            titre=dossier_traite.numero,
            statut='en_cours',
            date_reception=dossier_traite.date_reception,
            cree_par=request.user
        )
        
        # Cr√©er un candidat pour ce dossier
        candidat = Candidat.objects.create(
            dossier=nouveau_dossier,
            nom=dossier_traite.demandeur_candidat,
            diplome=dossier_traite.diplome,
            universite=dossier_traite.universite,
            pays=dossier_traite.pays
        )
        
        # Cr√©er un √©tat de dossier avec les informations du dossier trait√©
        EtatDossier.objects.create(
            candidat=candidat,
            a_decision_anterieure=True,
            date_decision_anterieure=dossier_traite.date_decision,
            decision_anterieure=f"Dossier pr√©c√©demment trait√©. Avis commission : {dossier_traite.avis_commission}",
            pieces_demandees="R√©√©valuation demand√©e par l'administrateur"
        )
        
        # Notifier les professeurs (tous les professeurs pour l'instant)
        professeurs = CustomUser.objects.filter(role='professeur')
        for professeur in professeurs:
            creer_notification(
                destinataire=professeur,
                type_notification='affectation',
                titre=f"Nouveau dossier pour r√©√©valuation : {nouveau_dossier.titre}",
                message=f"L'administrateur {request.user.get_full_name() or request.user.username} a cr√©√© un nouveau dossier pour r√©√©valuation bas√© sur un dossier trait√©. Message : {message_admin}",
                dossier=nouveau_dossier
            )
        
        messages.success(request, f"Nouveau dossier cr√©√© √† partir du dossier trait√© '{dossier_traite.numero}' et renvoy√© au professeur avec succ√®s.")
        return redirect('dossiers:dossiers_traites_admin')
    
    context = {
        'dossier_traite': dossier_traite,
    }
    
    return render(request, 'dossiers/renvoyer_dossier_traite_au_professeur.html', context)

@login_required
def ajouter_dossier_traite(request):
    """Ajouter un nouveau dossier trait√©"""
    if request.user.role != 'admin':
        messages.error(request, "Acc√®s non autoris√©")
        return redirect('dossiers:dashboard')
    
    if request.method == 'POST':
        try:
            # Cr√©er le dossier trait√©
            dossier = DossierTraite.objects.create(
                numero=request.POST.get('numero'),
                demandeur_candidat=request.POST.get('demandeur_candidat'),
                reference=request.POST.get('reference'),
                date_envoi=request.POST.get('date_envoi'),
                date_reception=request.POST.get('date_reception'),
                diplome=request.POST.get('diplome'),
                universite=request.POST.get('universite'),
                pays=request.POST.get('pays'),
                avis_commission="Import√© depuis Excel",
                cree_par=request.user
            )
            
            messages.success(request, f"Dossier trait√© '{dossier.numero}' ajout√© avec succ√®s")
            return redirect('dossiers:dossiers_traites_admin')
            
        except Exception as e:
            messages.error(request, f"Erreur lors de l'ajout : {str(e)}")
    
    return render(request, 'dossiers/ajouter_dossier_traite.html')

@login_required
def modifier_dossier_traite(request, dossier_id):
    """Modifier un dossier trait√© existant"""
    if request.user.role != 'admin':
        messages.error(request, "Acc√®s non autoris√©")
        return redirect('dossiers:dashboard')
    
    dossier = get_object_or_404(DossierTraite, id=dossier_id)
    
    if request.method == 'POST':
        try:
            # Mettre √† jour le dossier
            dossier.numero = request.POST.get('numero')
            dossier.demandeur_candidat = request.POST.get('demandeur_candidat')
            dossier.reference = request.POST.get('reference')
            dossier.date_envoi = request.POST.get('date_envoi')
            dossier.date_reception = request.POST.get('date_reception')
            dossier.diplome = request.POST.get('diplome')
            dossier.universite = request.POST.get('universite')
            dossier.pays = request.POST.get('pays')
            dossier.avis_commission = request.POST.get('avis_commission')
            dossier.save()
            
            messages.success(request, f"Dossier trait√© '{dossier.numero}' modifi√© avec succ√®s")
            return redirect('dossiers:dossiers_traites_admin')
            
        except Exception as e:
            messages.error(request, f"Erreur lors de la modification : {str(e)}")
    
    return render(request, 'dossiers/modifier_dossier_traite.html', {'dossier': dossier})

@login_required
def ajouter_reunion_dossier(request, dossier_id):
    """Ajouter une nouvelle r√©union √† un dossier trait√©"""
    if request.user.role != 'admin':
        messages.error(request, "Acc√®s non autoris√©")
        return redirect('dossiers:dashboard')
    
    dossier = get_object_or_404(DossierTraite, id=dossier_id)
    
    if request.method == 'POST':
        try:
            date_reunion = request.POST.get('date_reunion')
            participants = request.POST.get('participants')
            ordre_du_jour = request.POST.get('ordre_du_jour')
            decisions = request.POST.get('decisions')
            
            dossier.ajouter_reunion(date_reunion, participants, ordre_du_jour, decisions)
            
            messages.success(request, "R√©union ajout√©e avec succ√®s")
            return redirect('dossiers:modifier_dossier_traite', dossier_id=dossier.id)
            
        except Exception as e:
            messages.error(request, f"Erreur lors de l'ajout de la r√©union : {str(e)}")
    
    return render(request, 'dossiers/ajouter_reunion.html', {'dossier': dossier})

@login_required
def voir_reunions_dossier(request, dossier_id):
    """Voir toutes les r√©unions d'un dossier trait√©"""
    if request.user.role != 'admin':
        messages.error(request, "Acc√®s non autoris√©")
        return redirect('dossiers:dashboard')
    
    dossier = get_object_or_404(DossierTraite, id=dossier_id)
    
    context = {
        'dossier': dossier,
        'reunions': dossier.reunions,
    }
    return render(request, 'dossiers/voir_reunions_dossier.html', context)

@login_required
def import_excel_dossiers(request):
    """Importer des dossiers trait√©s depuis un fichier Excel"""
    if request.user.role != 'admin':
        messages.error(request, "Acc√®s non autoris√©")
        return redirect('dossiers:dashboard')
    
    if request.method == 'POST':
        try:
            excel_file = request.FILES.get('excel_file')
            if not excel_file:
                messages.error(request, "Aucun fichier s√©lectionn√©")
                return render(request, 'dossiers/import_excel_dossiers.html')
            
            # V√©rifier l'extension du fichier
            if not excel_file.name.endswith(('.xlsx', '.xls')):
                messages.error(request, "Veuillez s√©lectionner un fichier Excel (.xlsx ou .xls)")
                return render(request, 'dossiers/import_excel_dossiers.html')
            
            # Lire le fichier Excel
            df = pd.read_excel(excel_file, header=None)
            
            # Traiter les donn√©es
            dossiers_importes = 0
            dossiers_existants = 0
            erreurs = []
            
            # Parcourir les lignes du fichier Excel
            for index, row in df.iterrows():
                try:
                    # Ignorer les lignes vides, en-t√™tes ou non num√©riques
                    if (pd.isna(row[0]) or 
                        str(row[0]).strip() == '' or 
                        str(row[0]).lower() in ['no.', 'nan', 'situation des dossiers'] or
                        not str(row[0]).replace('.', '').replace('bis', '').isdigit()):
                        continue
                    
                    # Extraire les donn√©es
                    numero = str(row[0]).strip()
                    
                    # V√©rifier si le dossier existe d√©j√†
                    if DossierTraite.objects.filter(numero=numero).exists():
                        dossiers_existants += 1
                        continue
                    
                    # Extraire les autres donn√©es avec gestion des valeurs manquantes
                    demandeur = str(row[1]).strip() if not pd.isna(row[1]) else f"Candidat {numero}"
                    reference = str(row[2]).strip() if not pd.isna(row[2]) else f"REF-{numero}"
                    date_envoi = str(row[3]).strip() if not pd.isna(row[3]) else "Date non sp√©cifi√©e"
                    reference_reception = str(row[4]).strip() if not pd.isna(row[4]) else ""
                    date_reception = str(row[5]).strip() if not pd.isna(row[5]) else "Date non sp√©cifi√©e"
                    universite = str(row[7]).strip() if not pd.isna(row[7]) else "Universit√© non sp√©cifi√©e"
                    pays = str(row[8]).strip() if not pd.isna(row[8]) else "Pays non sp√©cifi√©"
                    date_avis = str(row[9]).strip() if not pd.isna(row[9]) else ""
                    avis_commission = str(row[10]).strip() if not pd.isna(row[10]) else "Avis non sp√©cifi√©"
                    
                    # Extraire les donn√©es de r√©unions depuis le fichier Excel
                    reunions = []
                    
                    # R√©union du 24 mars 2025 (colonne 12) - donn√©es r√©elles du fichier
                    if not pd.isna(row[12]) and str(row[12]).strip() != '':
                        reunions.append({
                            'date': '2025-03-24',
                            'participants': 'Commission d\'√©quivalence',
                            'ordre_du_jour': 'Examen du dossier d\'√©quivalence',
                            'decisions': str(row[12]).strip(),  # D√©cision r√©elle du fichier Excel
                            'date_ajout': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                        })
                    
                    # R√©union du 13 mai 2025 (colonne 13) - donn√©es r√©elles du fichier
                    if not pd.isna(row[13]) and str(row[13]).strip() != '':
                        reunions.append({
                            'date': '2025-05-13',
                            'participants': 'Commission d\'√©quivalence',
                            'ordre_du_jour': 'Examen du dossier d\'√©quivalence',
                            'decisions': str(row[13]).strip(),  # D√©cision r√©elle du fichier Excel
                            'date_ajout': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                        })
                    
                    # R√©union du 16 juin 2025 (colonne 14) - donn√©es r√©elles du fichier
                    if not pd.isna(row[14]) and str(row[14]).strip() != '':
                        reunions.append({
                            'date': '2025-06-16',
                            'participants': 'Commission d\'√©quivalence',
                            'ordre_du_jour': 'Examen du dossier d\'√©quivalence',
                            'decisions': str(row[14]).strip(),  # D√©cision r√©elle du fichier Excel
                            'date_ajout': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                        })
                    
                    # Cr√©er un nouveau dossier trait√© avec les vraies donn√©es
                    dossier = DossierTraite(
                        numero=numero,
                        demandeur_candidat=demandeur,
                        reference=reference,
                        date_envoi=datetime.now().date(),  # On garde la date d'aujourd'hui pour l'import
                        reference_reception=reference_reception,
                        date_reception=datetime.now().date(),  # On garde la date d'aujourd'hui pour l'import
                        diplome="Dipl√¥me d'Ing√©nieur en Topographie",  # Dipl√¥me par d√©faut
                        universite=universite,
                        pays=pays,
                        date_avis=datetime.now().date() if date_avis else None,
                        avis_commission=avis_commission,  # Avis r√©el de la commission depuis le fichier Excel
                        reunions=reunions,  # R√©unions r√©elles avec d√©cisions du fichier Excel
                        cree_par=request.user
                    )
                    
                    dossier.save()
                    dossiers_importes += 1
                    
                except Exception as e:
                    erreurs.append(f"Ligne {index + 1}: {str(e)}")
            
            # Messages de r√©sultat
            if dossiers_importes > 0:
                messages.success(request, f"‚úÖ {dossiers_importes} dossiers import√©s avec succ√®s")
            
            if dossiers_existants > 0:
                messages.warning(request, f"‚ö†Ô∏è {dossiers_existants} dossiers d√©j√† existants ignor√©s")
            
            if erreurs:
                for erreur in erreurs[:5]:  # Afficher seulement les 5 premi√®res erreurs
                    messages.error(request, erreur)
                if len(erreurs) > 5:
                    messages.error(request, f"... et {len(erreurs) - 5} autres erreurs")
            
            return redirect('dossiers:dossiers_traites_admin')
            
        except Exception as e:
            messages.error(request, f"‚ùå Erreur lors de l'import: {str(e)}")
    
    return render(request, 'dossiers/import_excel_dossiers.html')

@login_required
def import_excel_auto(request):
    """Importer automatiquement le fichier Excel existant"""
    if request.user.role != 'admin':
        messages.error(request, "Acc√®s non autoris√©")
        return redirect('dossiers:dashboard')
    
    try:
        # Chemin vers le fichier Excel existant
        excel_path = os.path.join(settings.BASE_DIR, 'suivi -equivalence-14juillet2025-Stagiaire.xlsx')
        
        if not os.path.exists(excel_path):
            messages.error(request, "‚ùå Fichier Excel non trouv√©")
            return redirect('dossiers:import_excel_dossiers')
        
        # Lire le fichier Excel
        df = pd.read_excel(excel_path, header=None)
        
        # Traiter les donn√©es
        dossiers_importes = 0
        dossiers_existants = 0
        erreurs = []
        
        # Parcourir les lignes du fichier Excel
        for index, row in df.iterrows():
            try:
                # Ignorer les lignes vides, en-t√™tes ou non num√©riques
                if (pd.isna(row[0]) or 
                    str(row[0]).strip() == '' or 
                    str(row[0]).lower() in ['no.', 'nan', 'situation des dossiers'] or
                    not str(row[0]).replace('.', '').replace('bis', '').isdigit()):
                    continue
                
                # Extraire les donn√©es
                numero = str(row[0]).strip()
                
                # V√©rifier si le dossier existe d√©j√†
                if DossierTraite.objects.filter(numero=numero).exists():
                    dossiers_existants += 1
                    continue
                
                # Extraire les autres donn√©es avec gestion des valeurs manquantes
                demandeur = str(row[1]).strip() if not pd.isna(row[1]) else f"Candidat {numero}"
                reference = str(row[2]).strip() if not pd.isna(row[2]) else f"REF-{numero}"
                date_envoi = str(row[3]).strip() if not pd.isna(row[3]) else "Date non sp√©cifi√©e"
                reference_reception = str(row[4]).strip() if not pd.isna(row[4]) else ""
                date_reception = str(row[5]).strip() if not pd.isna(row[5]) else "Date non sp√©cifi√©e"
                universite = str(row[7]).strip() if not pd.isna(row[7]) else "Universit√© non sp√©cifi√©e"
                pays = str(row[8]).strip() if not pd.isna(row[8]) else "Pays non sp√©cifi√©"
                date_avis = str(row[9]).strip() if not pd.isna(row[9]) else ""
                avis_commission = str(row[10]).strip() if not pd.isna(row[10]) else "Avis non sp√©cifi√©"
                
                # Extraire les donn√©es de r√©unions depuis le fichier Excel
                reunions = []
                
                # R√©union du 24 mars 2025 (colonne 12) - donn√©es r√©elles du fichier
                if not pd.isna(row[12]) and str(row[12]).strip() != '':
                    reunions.append({
                        'date': '2025-03-24',
                        'participants': 'Commission d\'√©quivalence',
                        'ordre_du_jour': 'Examen du dossier d\'√©quivalence',
                        'decisions': str(row[12]).strip(),  # D√©cision r√©elle du fichier Excel
                        'date_ajout': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                    })
                
                # R√©union du 13 mai 2025 (colonne 13) - donn√©es r√©elles du fichier
                if not pd.isna(row[13]) and str(row[13]).strip() != '':
                    reunions.append({
                        'date': '2025-05-13',
                        'participants': 'Commission d\'√©quivalence',
                        'ordre_du_jour': 'Examen du dossier d\'√©quivalence',
                        'decisions': str(row[13]).strip(),  # D√©cision r√©elle du fichier Excel
                        'date_ajout': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                    })
                
                # R√©union du 16 juin 2025 (colonne 14) - donn√©es r√©elles du fichier
                if not pd.isna(row[14]) and str(row[14]).strip() != '':
                    reunions.append({
                        'date': '2025-06-16',
                        'participants': 'Commission d\'√©quivalence',
                        'ordre_du_jour': 'Examen du dossier d\'√©quivalence',
                        'decisions': str(row[14]).strip(),  # D√©cision r√©elle du fichier Excel
                        'date_ajout': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                    })
                
                # Cr√©er un nouveau dossier trait√© avec les vraies donn√©es
                dossier = DossierTraite(
                    numero=numero,
                    demandeur_candidat=demandeur,
                    reference=reference,
                    date_envoi=datetime.now().date(),  # On garde la date d'aujourd'hui pour l'import
                    reference_reception=reference_reception,
                    date_reception=datetime.now().date(),  # On garde la date d'aujourd'hui pour l'import
                    diplome="Dipl√¥me d'Ing√©nieur en Topographie",  # Dipl√¥me par d√©faut
                    universite=universite,
                    pays=pays,
                    date_avis=datetime.now().date() if date_avis else None,
                    avis_commission=avis_commission,  # Avis r√©el de la commission depuis le fichier Excel
                    reunions=reunions,  # R√©unions r√©elles avec d√©cisions du fichier Excel
                    cree_par=request.user
                )
                
                dossier.save()
                dossiers_importes += 1
                
            except Exception as e:
                erreurs.append(f"Ligne {index + 1}: {str(e)}")
        
        # Messages de r√©sultat
        if dossiers_importes > 0:
            messages.success(request, f"‚úÖ {dossiers_importes} dossiers import√©s automatiquement")
        
        if dossiers_existants > 0:
            messages.warning(request, f"‚ö†Ô∏è {dossiers_existants} dossiers d√©j√† existants ignor√©s")
        
        if erreurs:
            for erreur in erreurs[:5]:  # Afficher seulement les 5 premi√®res erreurs
                messages.error(request, erreur)
            if len(erreurs) > 5:
                messages.error(request, f"... et {len(erreurs) - 5} autres erreurs")
        
    except Exception as e:
        messages.error(request, f"‚ùå Erreur lors de l'import automatique: {str(e)}")
    
    return redirect('dossiers:dossiers_traites_admin')

@login_required
def modifier_dossier(request, dossier_id):
    """Modifier un dossier existant"""
    if request.user.role != 'admin':
        messages.error(request, "Acc√®s non autoris√©")
        return redirect('dossiers:dashboard')
    
    dossier = get_object_or_404(Dossier, id=dossier_id)
    
    if request.method == 'POST':
        reference = request.POST.get('reference')
        date_reference = request.POST.get('date_reception')
        description = request.POST.get('description')
        statut = request.POST.get('statut')
        
        try:
            dossier.titre = reference  # Utiliser la r√©f√©rence comme titre
            dossier.description = description
            dossier.statut = statut
            if date_reference:
                dossier.date_reception = date_reference
            dossier.save()
            
            # G√©rer les pi√®ces jointes s√©par√©es
            diplome = request.FILES.get('diplome')
            programme = request.FILES.get('programme')
            notes = request.FILES.get('notes')
            
            if diplome:
                PieceJointe.objects.create(
                    dossier=dossier,
                    fichier=diplome,
                    description="Dipl√¥me"
                )
            
            if programme:
                PieceJointe.objects.create(
                    dossier=dossier,
                    fichier=programme,
                    description="Programme"
                )
            
            if notes:
                PieceJointe.objects.create(
                    dossier=dossier,
                    fichier=notes,
                    description="Notes"
                )
            
            messages.success(request, "Dossier modifi√© avec succ√®s.")
            return redirect('dossiers:gestion_dossiers')
            
        except Exception as e:
            messages.error(request, f"Erreur lors de la modification: {str(e)}")
    
    professeurs = CustomUser.objects.filter(role='professeur')
    context = {
        'dossier': dossier,
        'professeurs': professeurs,
        'statuts': Dossier.STATUT_CHOICES,
    }
    return render(request, 'dossiers/modifier_dossier.html', context)

@login_required
def supprimer_dossier(request, dossier_id):
    """Supprimer un dossier"""
    # Logs de d√©bogage
    print(f"üîß DEBUG: Tentative de suppression dossier {dossier_id}")
    print(f"üîß DEBUG: M√©thode: {request.method}")
    print(f"üîß DEBUG: Utilisateur: {request.user.username}")
    print(f"üîß DEBUG: R√¥le: {request.user.role}")
    
    # Temporairement supprim√© la v√©rification admin pour tester
    # if request.user.role != 'admin':
    #     messages.error(request, "Acc√®s non autoris√©")
    #     return redirect('dossiers:dashboard')
    
    dossier = get_object_or_404(Dossier, id=dossier_id)
    print(f"üîß DEBUG: Dossier trouv√©: {dossier.titre}")
    
    if request.method == 'POST' or request.method == 'GET':
        print(f"üîß DEBUG: Requ√™te {request.method} re√ßue")
        try:
            # Supprimer en cascade tous les √©l√©ments associ√©s
            # 1. Supprimer les pi√®ces jointes (si l'attribut existe)
            try:
                pieces_jointes = dossier.pieces_jointes.all()
                pieces_count = pieces_jointes.count()
                pieces_jointes.delete()
            except:
                pieces_count = 0
            
            # 2. Supprimer les historiques d'actions (si l'attribut existe)
            try:
                historiques = dossier.historiques.all()
                historiques_count = historiques.count()
                historiques.delete()
            except:
                historiques_count = 0
            
            # 3. Supprimer les rapports d'analyse (si l'attribut existe)
            try:
                rapports = dossier.rapports.all()
                rapports_count = rapports.count()
                rapports.delete()
            except:
                rapports_count = 0
            
            # 4. Supprimer les candidats et leurs donn√©es associ√©es
            try:
                candidat = dossier.candidat
                # Supprimer les d√©cisions de commission
                try:
                    candidat.decision.delete()
                except:
                    pass
                
                # Supprimer les √©valuations de comp√©tences
                candidat.evaluations.all().delete()
                
                # Supprimer les dipl√¥mes
                candidat.diplomes.all().delete()
                
                # Supprimer les pi√®ces manquantes
                candidat.pieces_manquantes.all().delete()
                
                # Supprimer la consistance acad√©mique
                try:
                    candidat.consistance_academique.delete()
                except:
                    pass
                
                # Supprimer l'√©tat du dossier
                try:
                    candidat.etat_dossier.delete()
                except:
                    pass
                
                # Supprimer le candidat
                candidat.delete()
            except:
                pass
            
            # 5. Supprimer le dossier lui-m√™me
            dossier_titre = dossier.titre
            dossier.delete()
            
            messages.success(request, f"Dossier '{dossier_titre}' supprim√© avec succ√®s. ({pieces_count} pi√®ces jointes, {historiques_count} historiques, {rapports_count} rapports supprim√©s)")
            return redirect('dossiers:gestion_dossiers')
            
        except Exception as e:
            messages.error(request, f"Erreur lors de la suppression: {str(e)}")
            print(f"Erreur de suppression dossier {dossier_id}: {str(e)}")
    
    return redirect('dossiers:gestion_dossiers')

@login_required
def controle_fiche_evaluation(request):
    """Vue pour le contr√¥le global de la fiche d'√©valuation par l'administrateur"""
    if request.user.role != 'admin':
        messages.error(request, "Acc√®s non autoris√©. Seuls les administrateurs peuvent acc√©der √† cette page.")
        return redirect('dossiers:dashboard')
    
    # Cr√©er la table si elle n'existe pas
    try:
        structure = StructureEvaluationGlobale.objects.filter(actif=True).latest('date_creation')
        # S'assurer que les champs JSON sont correctement initialis√©s
        if structure.criteres_personnalises_globaux is None:
            structure.criteres_personnalises_globaux = []
        if structure.competences_par_critere is None:
            structure.competences_par_critere = {}
        if not hasattr(structure, 'competences_criteres_fixes') or structure.competences_criteres_fixes is None:
            structure.competences_criteres_fixes = {}
        
        print(f"DEBUG: Structure charg√©e - Crit√®res: {structure.criteres_personnalises_globaux}")
    except Exception:
        # Cr√©er la table automatiquement
        from django.db import connection
        from django.db.migrations.executor import MigrationExecutor
        from django.db.migrations.autodetector import MigrationAutodetector
        from django.db.migrations.writer import MigrationWriter
        
        try:
            # Cr√©er la table manuellement
            with connection.cursor() as cursor:
                cursor.execute("""
                    CREATE TABLE IF NOT EXISTS dossiers_structureevaluationglobale (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        sciences_geodesiques_note_max INTEGER DEFAULT 16,
                        topographie_note_max INTEGER DEFAULT 16,
                        photogrammetrie_note_max INTEGER DEFAULT 16,
                        cartographie_note_max INTEGER DEFAULT 16,
                        droit_foncier_note_max INTEGER DEFAULT 10,
                        sig_note_max INTEGER DEFAULT 10,
                        teledetection_note_max INTEGER DEFAULT 10,
                        stages_note_max INTEGER DEFAULT 10,
                        criteres_personnalises_globaux TEXT DEFAULT '[]',
                        competences_par_critere TEXT DEFAULT '{}',
                        date_creation DATETIME DEFAULT CURRENT_TIMESTAMP,
                        date_modification DATETIME DEFAULT CURRENT_TIMESTAMP,
                        actif BOOLEAN DEFAULT 1
                    )
                """)
            
            # Cr√©er une structure par d√©faut
            structure = StructureEvaluationGlobale.objects.create(
                criteres_personnalises_globaux=[],
                competences_par_critere={}
            )
            messages.success(request, "Table de structure d'√©valuation cr√©√©e automatiquement !")
            
        except Exception as e:
            # Si la cr√©ation √©choue, utiliser une structure temporaire
            class StructureTemporaire:
                def __init__(self):
                    self.sciences_geodesiques_note_max = 16
                    self.topographie_note_max = 16
                    self.photogrammetrie_note_max = 16
                    self.cartographie_note_max = 16
                    self.droit_foncier_note_max = 10
                    self.sig_note_max = 10
                    self.teledetection_note_max = 10
                    self.stages_note_max = 10
                    self.criteres_personnalises_globaux = []
                    self.competences_par_critere = {}
                    self.competences_criteres_fixes = {}
                    self.criteres_fixes_supprimes = []
                    self.date_creation = timezone.now()
                    self.date_modification = timezone.now()
                    self.actif = True
                
                def save(self, force_update=False):
                    pass
            
            structure = StructureTemporaire()
            messages.warning(request, f"Mode temporaire : Impossible de cr√©er la table automatiquement. Erreur : {str(e)}")
    
    if request.method == 'POST':
        print(f"DEBUG: POST data keys: {list(request.POST.keys())}")
        print(f"DEBUG: POST data: {dict(request.POST)}")
        
        # Gestion des crit√®res obligatoires
        structure.sciences_geodesiques_note_max = int(request.POST.get('sciences_geodesiques_note_max', 16))
        structure.topographie_note_max = int(request.POST.get('topographie_note_max', 16))
        structure.photogrammetrie_note_max = int(request.POST.get('photogrammetrie_note_max', 16))
        structure.cartographie_note_max = int(request.POST.get('cartographie_note_max', 16))
        structure.droit_foncier_note_max = int(request.POST.get('droit_foncier_note_max', 10))
        structure.sig_note_max = int(request.POST.get('sig_note_max', 10))
        structure.teledetection_note_max = int(request.POST.get('teledetection_note_max', 10))
        structure.stages_note_max = int(request.POST.get('stages_note_max', 10))
        
        # Gestion de la suppression des crit√®res fixes
        if 'supprimer_critere_fixe' in request.POST:
            critere_fixe_a_supprimer = request.POST.get('supprimer_critere_fixe')
            print(f"DEBUG: Suppression crit√®re fixe: {critere_fixe_a_supprimer}")
            
            # Marquer le crit√®re comme supprim√© (on ne peut pas vraiment le supprimer, mais on peut le masquer)
            if hasattr(structure, 'criteres_fixes_supprimes'):
                if structure.criteres_fixes_supprimes is None:
                    structure.criteres_fixes_supprimes = []
            else:
                structure.criteres_fixes_supprimes = []
            
            if critere_fixe_a_supprimer not in structure.criteres_fixes_supprimes:
                structure.criteres_fixes_supprimes.append(critere_fixe_a_supprimer)
                messages.success(request, f"Crit√®re '{critere_fixe_a_supprimer}' marqu√© comme supprim√©.")
            else:
                messages.warning(request, f"Le crit√®re '{critere_fixe_a_supprimer}' est d√©j√† supprim√©.")
        
        # Gestion des crit√®res personnalis√©s
        action_critere = request.POST.get('action_critere')
        if action_critere == 'ajouter':
            nom_critere = request.POST.get('nom_critere_personnalise', '').strip()
            note_max_critere = request.POST.get('note_max_critere_personnalise', 0)
            if nom_critere and note_max_critere:
                try:
                    note_max = int(note_max_critere)
                    # Calculer le prochain ID en s'assurant qu'il est unique
                    next_id = 1
                    if structure.criteres_personnalises_globaux:
                        existing_ids = [c.get('id', 0) for c in structure.criteres_personnalises_globaux]
                        next_id = max(existing_ids) + 1 if existing_ids else 1
                    
                    nouveau_critere = {
                        'id': next_id,
                        'nom': nom_critere,
                        'note_max': note_max,
                        'comp√©tences': [],
                        'date_creation': timezone.now().isoformat()  # Ajouter un timestamp pour l'ordre
                    }
                    structure.criteres_personnalises_globaux.append(nouveau_critere)
                    
                    # Sauvegarder imm√©diatement la structure apr√®s l'ajout du crit√®re
                    if hasattr(structure, '_meta'):  # C'est un vrai mod√®le Django
                        structure.save(force_update=True)
                        structure.refresh_from_db()
                    
                    messages.success(request, f"Crit√®re '{nom_critere}' ajout√© avec succ√®s.")
                except ValueError:
                    pass
        elif action_critere == 'supprimer':
            critere_id = request.POST.get('critere_id')
            print(f"DEBUG: Suppression crit√®re - ID re√ßu: {critere_id}")
            print(f"DEBUG: Crit√®res actuels: {structure.criteres_personnalises_globaux}")
            
            if critere_id:
                try:
                    critere_id = int(critere_id)
                    critere_a_supprimer = None
                    for critere in structure.criteres_personnalises_globaux:
                        print(f"DEBUG: V√©rification crit√®re {critere.get('id')} vs {critere_id}")
                        if critere.get('id') == critere_id:
                            critere_a_supprimer = critere
                            break
                    
                    if critere_a_supprimer:
                        print(f"DEBUG: Suppression du crit√®re: {critere_a_supprimer.get('nom')}")
                        structure.criteres_personnalises_globaux = [
                            c for c in structure.criteres_personnalises_globaux 
                            if c.get('id') != critere_id
                        ]
                        print(f"DEBUG: Crit√®res apr√®s suppression: {structure.criteres_personnalises_globaux}")
                        messages.success(request, f"Crit√®re '{critere_a_supprimer.get('nom')}' supprim√© avec succ√®s.")
                    else:
                        print(f"DEBUG: Crit√®re avec ID {critere_id} non trouv√©")
                        messages.error(request, f"Crit√®re avec ID {critere_id} non trouv√©.")
                except ValueError as e:
                    print(f"DEBUG: Erreur de conversion ID: {e}")
                    messages.error(request, f"Erreur lors de la suppression: ID invalide.")
            else:
                print("DEBUG: Aucun ID de crit√®re fourni")
                messages.error(request, "Aucun crit√®re s√©lectionn√© pour la suppression.")
        
        # Gestion des comp√©tences pour les crit√®res personnalis√©s
        print(f"DEBUG: POST data keys: {list(request.POST.keys())}")
        print(f"DEBUG: Crit√®res personnalis√©s avant traitement: {structure.criteres_personnalises_globaux}")
        
        # APPROCHE ROBUSTE - Recr√©er compl√®tement la liste des crit√®res
        criteres_modifies = []
        modifications_effectuees = False
        
        for critere in structure.criteres_personnalises_globaux:
            critere_id = critere.get('id')
            print(f"DEBUG: Traitement du crit√®re {critere.get('nom')} (ID: {critere_id})")
            
            # Cr√©er une copie du crit√®re
            critere_copie = critere.copy()
            
            # Ajout d'une comp√©tence
            ajouter_key = f'ajouter_competence_{critere_id}'
            nouvelle_comp_key = f'nouvelle_competence_{critere_id}'
            
            if ajouter_key in request.POST:
                print(f"DEBUG: Bouton ajouter d√©tect√© pour le crit√®re {critere_id}")
                nouvelle_comp = request.POST.get(nouvelle_comp_key, '').strip()
                print(f"DEBUG: Nouvelle comp√©tence saisie: '{nouvelle_comp}'")
                
                if nouvelle_comp:
                    # S'assurer que la liste des comp√©tences existe
                    if 'comp√©tences' not in critere_copie or critere_copie['comp√©tences'] is None:
                        critere_copie['comp√©tences'] = []
                    
                    # Ajouter la comp√©tence
                    critere_copie['comp√©tences'].append(nouvelle_comp)
                    modifications_effectuees = True
                    print(f"DEBUG: Comp√©tence ajout√©e. Liste maintenant: {critere_copie['comp√©tences']}")
                    messages.success(request, f"Comp√©tence '{nouvelle_comp}' ajout√©e au crit√®re '{critere_copie.get('nom')}'.")
                else:
                    messages.warning(request, "Veuillez saisir une comp√©tence √† ajouter.")
            
            # Suppression d'une comp√©tence
            for idx, comp in enumerate(critere_copie.get('comp√©tences', [])):
                supprimer_key = f'supprimer_competence_{critere_id}_{idx}'
                if supprimer_key in request.POST:
                    critere_copie['comp√©tences'].pop(idx)
                    modifications_effectuees = True
                    messages.success(request, f"Comp√©tence '{comp}' supprim√©e du crit√®re '{critere_copie.get('nom')}'.")
                    break
            
            criteres_modifies.append(critere_copie)
        
        # Mettre √† jour la structure seulement si des modifications ont √©t√© effectu√©es
        if modifications_effectuees:
            structure.criteres_personnalises_globaux = criteres_modifies
            print(f"DEBUG: Crit√®res personnalis√©s apr√®s traitement: {structure.criteres_personnalises_globaux}")
        else:
            print("DEBUG: Aucune modification d√©tect√©e")
        
        # Trier les crit√®res personnalis√©s par ordre d'ajout (par ID) pour garantir l'ordre d'affichage
        if structure.criteres_personnalises_globaux:
            structure.criteres_personnalises_globaux.sort(key=lambda x: x.get('id', 0))
            print(f"DEBUG: Crit√®res personnalis√©s tri√©s par ID: {[c.get('id') for c in structure.criteres_personnalises_globaux]}")
        
        # Gestion des modifications de notes maximales pour les crit√®res personnalis√©s
        for critere in structure.criteres_personnalises_globaux:
            critere_id = critere.get('id')
            note_max_key = f'critere_personnalise_note_max_{critere_id}'
            
            if note_max_key in request.POST:
                try:
                    nouvelle_note_max = int(request.POST.get(note_max_key))
                    if 1 <= nouvelle_note_max <= 20:
                        critere['note_max'] = nouvelle_note_max
                        print(f"DEBUG: Note maximale mise √† jour pour le crit√®re {critere.get('nom')}: {nouvelle_note_max}")
                        modifications_effectuees = True
                    else:
                        messages.error(request, f"La note maximale doit √™tre entre 1 et 20 pour le crit√®re '{critere.get('nom')}'.")
                except ValueError:
                    messages.error(request, f"Valeur invalide pour la note maximale du crit√®re '{critere.get('nom')}'.")
        
        # Gestion des comp√©tences des crit√®res fixes
        if not hasattr(structure, 'competences_criteres_fixes') or structure.competences_criteres_fixes is None:
            structure.competences_criteres_fixes = {}
        
        print(f"DEBUG: Comp√©tences crit√®res fixes avant traitement: {structure.competences_criteres_fixes}")
        
        # Initialiser avec les comp√©tences par d√©faut si vide
        competences_par_defaut = {
            'sciences_geodesiques': [
                'de la g√©od√©sie g√©om√©trique',
                'de l\'astronomie la g√©od√©sie spatiale',
                'de la g√©od√©sie physique',
                'Ajustements et compensations par moindres carr√©es',
                'des syst√®mes et r√©f√©rentiels g√©od√©siques',
                'des projections cartographiques (carto.math√©matique)',
                'de la g√©od√©sie appliqu√©e',
                'du GNSS et de',
                'la micro-g√©od√©sie y compris les diff√©rentes techniques de mesure'
            ],
            'topographie': [
                'Th√©orique et pratique de la topographie',
                'Topom√©trique et instrumentation',
                'Techniques de mensuration'
            ],
            'photogrammetrie': [
                'Base et approfondie de la photogramm√©trie',
                'Mise en place des photographies a√©riennes',
                'A√©rotriangulation',
                'Restitution photogramm√©trique',
                'G√©n√©ration de produits d√©riv√©s (MNT/Ortho)',
                'Drone'
            ],
            'cartographie': [
                'Cartographie topographique',
                'Syst√®mes de repr√©sentation cartographique',
                'Cartographie th√©matique',
                'S√©miologie et langage cartographique',
                'DAO/CAO',
                'Drone (Cartographie)'
            ],
            'droit_foncier': [
                'Droit foncier',
                'Techniques cadastrales',
                'Gestion fonci√®re et am√©nagement',
                'R√©glementations cadastre et propri√©t√©'
            ],
            'sig': [
                'Bases en SIG',
                'Gestion et analyse des donn√©es spatiales',
                'Bases de donn√©es g√©ographiques',
                'Web mapping'
            ],
            'teledetection': [
                'Bases physiques de la t√©l√©d√©tection',
                'Traitement d\'images optique/radar',
                'Applications de la t√©l√©d√©tection'
            ]
        }
        
        # Initialiser les comp√©tences par d√©faut si elles n'existent pas
        for critere_fixe, comps_defaut in competences_par_defaut.items():
            if critere_fixe not in structure.competences_criteres_fixes or not structure.competences_criteres_fixes[critere_fixe]:
                structure.competences_criteres_fixes[critere_fixe] = comps_defaut.copy()
        
        # Liste des crit√®res fixes
        criteres_fixes = ['sciences_geodesiques', 'topographie', 'photogrammetrie', 'cartographie', 'droit_foncier', 'sig', 'teledetection']
        
        for critere_fixe in criteres_fixes:
            # Ajout de comp√©tence pour crit√®re fixe
            ajouter_key = f'ajouter_comp_fixe_{critere_fixe}'
            nouvelle_comp_key = f'nouvelle_comp_fixe_{critere_fixe}'
            
            if ajouter_key in request.POST:
                nouvelle_comp = request.POST.get(nouvelle_comp_key, '').strip()
                print(f"DEBUG: Ajout comp√©tence pour {critere_fixe}: '{nouvelle_comp}'")
                if nouvelle_comp:
                    if critere_fixe not in structure.competences_criteres_fixes:
                        structure.competences_criteres_fixes[critere_fixe] = []
                    structure.competences_criteres_fixes[critere_fixe].append(nouvelle_comp)
                    print(f"DEBUG: Comp√©tence ajout√©e. Nouveau contenu: {structure.competences_criteres_fixes[critere_fixe]}")
                    messages.success(request, f"Comp√©tence '{nouvelle_comp}' ajout√©e au crit√®re '{critere_fixe}'.")
            
            # Suppression de comp√©tence pour crit√®re fixe
            for idx in range(20):  # Limite arbitraire pour √©viter les boucles infinies
                supprimer_key = f'supprimer_comp_fixe_{critere_fixe}_{idx}'
                if supprimer_key in request.POST:
                    print(f"DEBUG: Suppression comp√©tence pour {critere_fixe} √† l'index {idx}")
                    print(f"DEBUG: Comp√©tences actuelles: {structure.competences_criteres_fixes.get(critere_fixe, [])}")
                    
                    if critere_fixe in structure.competences_criteres_fixes and idx < len(structure.competences_criteres_fixes[critere_fixe]):
                        comp_supprimee = structure.competences_criteres_fixes[critere_fixe].pop(idx)
                        print(f"DEBUG: Comp√©tence supprim√©e: '{comp_supprimee}'")
                        print(f"DEBUG: Comp√©tences apr√®s suppression: {structure.competences_criteres_fixes[critere_fixe]}")
                        messages.success(request, f"Comp√©tence '{comp_supprimee}' supprim√©e du crit√®re '{critere_fixe}'.")
                    else:
                        print(f"DEBUG: Impossible de supprimer - crit√®re: {critere_fixe in structure.competences_criteres_fixes}, index: {idx}, longueur: {len(structure.competences_criteres_fixes.get(critere_fixe, []))}")
                    break
        
        # Gestion des stages configurables (seuls les administrateurs peuvent ajouter/supprimer)
        if not hasattr(structure, 'stages_configurables') or structure.stages_configurables is None:
            structure.stages_configurables = []
        
        action_stage = request.POST.get('action_stage')
        if action_stage == 'ajouter':
            nom_stage = request.POST.get('nom_stage_personnalise', '').strip()
            duree_stage = request.POST.get('duree_stage_personnalise', '').strip()
            if nom_stage and duree_stage:
                nouveau_stage = {
                    'id': len(structure.stages_configurables) + 1,
                    'nom': nom_stage,
                    'duree': duree_stage,
                    'actif': True
                }
                structure.stages_configurables.append(nouveau_stage)
                messages.success(request, f"Stage '{nom_stage}' ajout√© avec succ√®s.")
        elif action_stage == 'supprimer':
            stage_id = request.POST.get('stage_id')
            if stage_id:
                try:
                    stage_id = int(stage_id)
                    stage_a_supprimer = None
                    for stage in structure.stages_configurables:
                        if stage.get('id') == stage_id:
                            stage_a_supprimer = stage
                            break
                    
                    if stage_a_supprimer:
                        structure.stages_configurables = [
                            s for s in structure.stages_configurables 
                            if s.get('id') != stage_id
                        ]
                        messages.success(request, f"Stage '{stage_a_supprimer.get('nom')}' supprim√© avec succ√®s.")
                except ValueError:
                    pass
        
        # Gestion de la suppression des stages par d√©faut
        stages_par_defaut = [
            'stage_conservation_fonciere',
            'stage_cadastre', 
            'stage_geodesie',
            'stage_topographie',
            'stage_photogrammetrie'
        ]
        
        for stage_defaut in stages_par_defaut:
            if request.POST.get(f'supprimer_stage_defaut_{stage_defaut}'):
                # Marquer le stage comme supprim√© dans la structure
                if not hasattr(structure, 'stages_defaut_supprimes') or structure.stages_defaut_supprimes is None:
                    structure.stages_defaut_supprimes = []
                if stage_defaut not in structure.stages_defaut_supprimes:
                    structure.stages_defaut_supprimes.append(stage_defaut)
                messages.success(request, f"Stage par d√©faut '{stage_defaut}' supprim√© avec succ√®s.")
        
        try:
            # Trier les crit√®res personnalis√©s par ordre d'ajout (par ID) pour garantir l'ordre d'affichage
            if structure.criteres_personnalises_globaux:
                structure.criteres_personnalises_globaux.sort(key=lambda x: x.get('id', 0))
                print(f"DEBUG: Crit√®res personnalis√©s tri√©s par ID: {[c.get('id') for c in structure.criteres_personnalises_globaux]}")
            
            # Debug: afficher la structure avant sauvegarde
            print(f"DEBUG: Structure avant sauvegarde - Crit√®res personnalis√©s: {structure.criteres_personnalises_globaux}")
            print(f"DEBUG: Structure avant sauvegarde - Comp√©tences crit√®res fixes: {structure.competences_criteres_fixes}")
            print(f"DEBUG: Structure avant sauvegarde - Stages configurables: {structure.stages_configurables}")
            
            # Forcer la mise √† jour des champs JSON
            structure.date_modification = timezone.now()
            
            # V√©rifier si c'est une vraie instance de mod√®le ou une structure temporaire
            if hasattr(structure, '_meta'):  # C'est un vrai mod√®le Django
                structure.save(force_update=True)
                structure.refresh_from_db()
            else:  # C'est une structure temporaire
                structure.save()
            print(f"DEBUG: Structure apr√®s sauvegarde - Crit√®res personnalis√©s: {structure.criteres_personnalises_globaux}")
            
            messages.success(request, "Structure de la fiche d'√©valuation mise √† jour avec succ√®s.")
        except Exception as e:
            messages.error(request, f"Erreur lors de la sauvegarde : {str(e)}")
            print(f"DEBUG: Erreur de sauvegarde: {str(e)}")
            import traceback
            traceback.print_exc()
        return redirect('dossiers:controle_fiche_evaluation')
    
    # Comp√©tences par d√©faut pour les crit√®res fixes
    competences_par_defaut = {
        'sciences_geodesiques': [
            'de la g√©od√©sie g√©om√©trique',
            'de l\'astronomie la g√©od√©sie spatiale',
            'de la g√©od√©sie physique',
            'Ajustements et compensations par moindres carr√©es',
            'des syst√®mes et r√©f√©rentiels g√©od√©siques',
            'des projections cartographiques (carto.math√©matique)',
            'de la g√©od√©sie appliqu√©e',
            'du GNSS et de',
            'la micro-g√©od√©sie y compris les diff√©rentes techniques de mesure'
        ],
        'topographie': [
            'Th√©orique et pratique de la topographie',
            'Topom√©trique et instrumentation',
            'Techniques de mensuration'
        ],
        'photogrammetrie': [
            'Base et approfondie de la photogramm√©trie',
            'Mise en place des photographies a√©riennes',
            'A√©rotriangulation',
            'Restitution photogramm√©trique',
            'G√©n√©ration de produits d√©riv√©s (MNT/Ortho)',
            'Drone'
        ],
        'cartographie': [
            'Cartographie topographique',
            'Syst√®mes de repr√©sentation cartographique',
            'Cartographie th√©matique',
            'S√©miologie et langage cartographique',
            'DAO/CAO',
            'Drone (Cartographie)'
        ],
        'droit_foncier': [
            'Droit foncier',
            'Techniques cadastrales',
            'Gestion fonci√®re et am√©nagement',
            'R√©glementations cadastre et propri√©t√©'
        ],
        'sig': [
            'Bases en SIG',
            'Gestion et analyse des donn√©es spatiales',
            'Bases de donn√©es g√©ographiques',
            'Web mapping'
        ],
        'teledetection': [
            'Bases physiques de la t√©l√©d√©tection',
            'Traitement d\'images optique/radar',
            'Applications de la t√©l√©d√©tection'
        ]
    }
    
    context = {
        'structure': structure,
        'user': request.user,
        'comp√©tences_sciences_geodesiques': competences_par_defaut['sciences_geodesiques'],
        'comp√©tences_topographie': competences_par_defaut['topographie'],
        'comp√©tences_photogrammetrie': competences_par_defaut['photogrammetrie'],
        'comp√©tences_cartographie': competences_par_defaut['cartographie'],
        'comp√©tences_droit_foncier': competences_par_defaut['droit_foncier'],
        'comp√©tences_sig': competences_par_defaut['sig'],
        'comp√©tences_teledetection': competences_par_defaut['teledetection'],
    }
    return render(request, 'dossiers/controle_fiche_evaluation.html', context)

@login_required
def voir_avis_commission(request, dossier_id):
    """Voir l'avis de commission d'un dossier trait√©"""
    if request.user.role != 'admin':
        messages.error(request, "Acc√®s non autoris√©")
        return redirect('dossiers:dashboard')
    
    dossier = get_object_or_404(DossierTraite, id=dossier_id)
    
    context = {
        'dossier': dossier,
    }
    return render(request, 'dossiers/voir_avis_commission.html', context)

@login_required
def creer_reunion_multiple(request):
    """Cr√©er une r√©union pour plusieurs dossiers trait√©s"""
    if request.user.role != 'admin':
        messages.error(request, "Acc√®s non autoris√©")
        return redirect('dossiers:dashboard')
    
    # Support pour GET (fallback si le modal ne fonctionne pas)
    if request.method == 'GET' and request.GET.get('titre') and request.GET.get('dossiers_ids'):
        titre = request.GET.get('titre')
        dossiers_ids = request.GET.get('dossiers_ids')
        
        # Cr√©er une r√©union simple avec les param√®tres GET
        try:
            ids_list = [int(id.strip()) for id in dossiers_ids.split(',') if id.strip()]
            dossiers = DossierTraite.objects.filter(id__in=ids_list)
            
            if dossiers.exists():
                from datetime import datetime, timedelta
                date_reunion_obj = datetime.now() + timedelta(days=7)  # Dans une semaine par d√©faut
                
                participants = f"Admin: {request.user.get_full_name() or request.user.username}"
                ordre_du_jour = f"{titre}\n\nDossiers √† traiter:\n"
                
                for dossier in dossiers:
                    ordre_du_jour += f"- {dossier.demandeur_candidat} ({dossier.reference})\n"
                
                decisions = f"R√©union cr√©√©e le {timezone.now().strftime('%d/%m/%Y √† %H:%M')} pour traiter {len(dossiers)} dossier(s)."
                
                reunions_creees = 0
                for dossier in dossiers:
                    try:
                        dossier.ajouter_reunion(
                            date_reunion=date_reunion_obj,
                            participants=participants,
                            ordre_du_jour=ordre_du_jour,
                            decisions=decisions
                        )
                        reunions_creees += 1
                    except Exception as e:
                        print(f"Erreur lors de l'ajout de r√©union pour le dossier {dossier.id}: {e}")
                
                messages.success(request, f"R√©union '{titre}' cr√©√©e avec succ√®s pour {reunions_creees} dossier(s).")
            else:
                messages.error(request, "Aucun dossier valide trouv√©.")
                
        except Exception as e:
            messages.error(request, f"Erreur lors de la cr√©ation : {str(e)}")
        
        return redirect('dossiers:dossiers_traites_admin')
    
    if request.method == 'POST':
        try:
            # R√©cup√©rer les donn√©es du formulaire
            titre = request.POST.get('titre')
            date_reunion = request.POST.get('date_reunion')
            description = request.POST.get('description', '')
            dossiers_ids = request.POST.get('dossiers_ids', '')
            
            if not titre or not date_reunion or not dossiers_ids:
                messages.error(request, "Veuillez remplir tous les champs obligatoires.")
                return redirect('dossiers:dossiers_traites_admin')
            
            # Convertir la cha√Æne d'IDs en liste
            ids_list = [int(id.strip()) for id in dossiers_ids.split(',') if id.strip()]
            
            if not ids_list:
                messages.error(request, "Aucun dossier s√©lectionn√©.")
                return redirect('dossiers:dossiers_traites_admin')
            
            # R√©cup√©rer les dossiers
            dossiers = DossierTraite.objects.filter(id__in=ids_list)
            
            if not dossiers.exists():
                messages.error(request, "Aucun dossier valide trouv√©.")
                return redirect('dossiers:dossiers_traites_admin')
            
            # Convertir date_reunion en datetime
            from datetime import datetime
            date_reunion_obj = datetime.fromisoformat(date_reunion)
            
            # Pr√©parer les informations de la r√©union
            participants = f"Admin: {request.user.get_full_name() or request.user.username}"
            ordre_du_jour = f"{titre}\n\nDossiers √† traiter:\n"
            
            # Ajouter la liste des dossiers
            for dossier in dossiers:
                ordre_du_jour += f"- {dossier.demandeur_candidat} ({dossier.reference})\n"
            
            if description:
                ordre_du_jour += f"\nDescription: {description}"
            
            decisions = f"R√©union cr√©√©e le {timezone.now().strftime('%d/%m/%Y √† %H:%M')} pour traiter {len(dossiers)} dossier(s)."
            
            # Ajouter la r√©union √† tous les dossiers s√©lectionn√©s
            reunions_creees = 0
            for dossier in dossiers:
                try:
                    dossier.ajouter_reunion(
                        date_reunion=date_reunion_obj,
                        participants=participants,
                        ordre_du_jour=ordre_du_jour,
                        decisions=decisions
                    )
                    reunions_creees += 1
                except Exception as e:
                    print(f"Erreur lors de l'ajout de r√©union pour le dossier {dossier.id}: {e}")
            
            if reunions_creees > 0:
                messages.success(request, f"R√©union '{titre}' cr√©√©e avec succ√®s pour {reunions_creees} dossier(s).")
            else:
                messages.error(request, "Aucune r√©union n'a pu √™tre cr√©√©e.")
            
        except ValueError as e:
            messages.error(request, f"Erreur dans les donn√©es : {str(e)}")
        except Exception as e:
            messages.error(request, f"Erreur lors de la cr√©ation de la r√©union : {str(e)}")
    
    return redirect('dossiers:dossiers_traites_admin')

@login_required
def creer_reunion_form(request):
    """Page d√©di√©e pour cr√©er une r√©union avec les dossiers s√©lectionn√©s"""
    if request.user.role != 'admin':
        messages.error(request, "Acc√®s non autoris√©")
        return redirect('dossiers:dashboard')
    
    # R√©cup√©rer les IDs des dossiers s√©lectionn√©s
    dossiers_ids = request.GET.get('dossiers_ids', '')
    
    if not dossiers_ids:
        messages.error(request, "Aucun dossier s√©lectionn√©.")
        return redirect('dossiers:dossiers_traites_admin')
    
    try:
        ids_list = [int(id.strip()) for id in dossiers_ids.split(',') if id.strip()]
        dossiers = DossierTraite.objects.filter(id__in=ids_list)
        
        if not dossiers.exists():
            messages.error(request, "Aucun dossier valide trouv√©.")
            return redirect('dossiers:dossiers_traites_admin')
    
    except ValueError:
        messages.error(request, "IDs de dossiers invalides.")
        return redirect('dossiers:dossiers_traites_admin')
    
    # Traitement du formulaire POST
    if request.method == 'POST':
        try:
            titre = request.POST.get('titre')
            date_reunion = request.POST.get('date_reunion')
            description = request.POST.get('description', '')
            
            # V√©rifier que tous les dossiers ont une d√©cision
            decisions_manquantes = []
            for dossier in dossiers:
                decision_key = f'decision_{dossier.id}'
                decision_value = request.POST.get(decision_key, '').strip()
                if not decision_value:
                    decisions_manquantes.append(f"{dossier.demandeur_candidat} ({dossier.numero})")
            
            if not titre or not date_reunion:
                messages.error(request, "Veuillez remplir tous les champs obligatoires.")
                return render(request, 'dossiers/creer_reunion_form.html', {
                    'dossiers': dossiers,
                    'dossiers_count': len(dossiers),
                    'dossiers_ids': dossiers_ids
                })
            
            if decisions_manquantes:
                messages.error(request, f"Veuillez remplir les d√©cisions pour : {', '.join(decisions_manquantes)}")
                return render(request, 'dossiers/creer_reunion_form.html', {
                    'dossiers': dossiers,
                    'dossiers_count': len(dossiers),
                    'dossiers_ids': dossiers_ids
                })
            
            # Convertir date_reunion en datetime
            from datetime import datetime
            date_reunion_obj = datetime.fromisoformat(date_reunion)
            
            # Pr√©parer les informations de la r√©union
            participants = f"Admin: {request.user.get_full_name() or request.user.username}"
            ordre_du_jour = f"{titre}\n\nDossiers √† traiter:\n"
            
            # Ajouter la liste des dossiers
            for dossier in dossiers:
                ordre_du_jour += f"- {dossier.demandeur_candidat} ({dossier.reference})\n"
            
            if description:
                ordre_du_jour += f"\nDescription g√©n√©rale: {description}"
            
            # Ajouter la r√©union avec d√©cision individuelle pour chaque dossier
            reunions_creees = 0
            for dossier in dossiers:
                try:
                    # R√©cup√©rer la d√©cision sp√©cifique pour ce dossier
                    decision_key = f'decision_{dossier.id}'
                    decision_individuelle = request.POST.get(decision_key, '').strip()
                    
                    # Cr√©er les d√©cisions sp√©cifiques pour ce dossier
                    decisions_dossier = f"R√©union '{titre}' du {date_reunion_obj.strftime('%d/%m/%Y √† %H:%M')}\n\n"
                    decisions_dossier += f"D√©cision pour {dossier.demandeur_candidat} ({dossier.numero}):\n"
                    decisions_dossier += f"{decision_individuelle}\n\n"
                    decisions_dossier += f"Valid√© par: {request.user.get_full_name() or request.user.username}"
                    
                    dossier.ajouter_reunion(
                        date_reunion=date_reunion_obj,
                        participants=participants,
                        ordre_du_jour=ordre_du_jour,
                        decisions=decisions_dossier
                    )
                    reunions_creees += 1
                except Exception as e:
                    print(f"Erreur lors de l'ajout de r√©union pour le dossier {dossier.id}: {e}")
            
            if reunions_creees > 0:
                messages.success(request, f"R√©union '{titre}' cr√©√©e avec succ√®s pour {reunions_creees} dossier(s) avec d√©cisions individuelles.")
                return redirect('dossiers:dossiers_traites_admin')
            else:
                messages.error(request, "Aucune r√©union n'a pu √™tre cr√©√©e.")
            
        except ValueError as e:
            messages.error(request, f"Erreur dans la date : {str(e)}")
        except Exception as e:
            messages.error(request, f"Erreur lors de la cr√©ation de la r√©union : {str(e)}")
    
    # Affichage du formulaire (GET)
    context = {
        'dossiers': dossiers,
        'dossiers_count': len(dossiers),
        'dossiers_ids': dossiers_ids
    }
    return render(request, 'dossiers/creer_reunion_form.html', context)

@login_required
def supprimer_dossier_traite(request, dossier_id):
    """Vue pour supprimer un dossier trait√©"""
    if request.user.role != 'admin':
        messages.error(request, "Acc√®s non autoris√©")
        return redirect('dossiers:dashboard')
    
    try:
        # V√©rifier si le dossier trait√© existe (mod√®le DossierTraite)
        dossier = DossierTraite.objects.get(id=dossier_id)
        print(f"‚úÖ Dossier trait√© trouv√©: ID {dossier_id}, Num√©ro: {dossier.numero}")
        
    except DossierTraite.DoesNotExist:
        print(f"‚ùå Dossier trait√© non trouv√©: ID {dossier_id}")
        messages.error(request, f"Dossier trait√© avec l'ID {dossier_id} non trouv√©. Il a peut-√™tre √©t√© supprim√© entre-temps.")
        return redirect('dossiers:dossiers_traites_admin')
    
    if request.method == 'POST':
        try:
            # Supprimer le dossier trait√©
            numero_dossier = dossier.numero
            candidat_dossier = dossier.demandeur_candidat
            dossier.delete()
            
            messages.success(request, f"Dossier trait√© '{numero_dossier}' ({candidat_dossier}) supprim√© avec succ√®s")
            return redirect('dossiers:dossiers_traites_admin')
            
        except Exception as e:
            messages.error(request, f"Erreur lors de la suppression : {str(e)}")
            return redirect('dossiers:dossiers_traites_admin')
    
    context = {
        'dossier': dossier,
    }
    return render(request, 'dossiers/confirmer_suppression_dossier_traite.html', context)
