#!/usr/bin/env python
"""
Script de test pour v√©rifier le bouton de suppression dans l'interface web
"""

import os
import sys
import django
import requests
from bs4 import BeautifulSoup

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'equivalence.settings')
django.setup()

from dossiers.models import Dossier
from users.models import CustomUser

def test_interface_suppression():
    """Test de l'interface de suppression via le web"""
    print("=== Test de l'interface de suppression ===")
    
    # Cr√©er un utilisateur admin de test
    admin, created = CustomUser.objects.get_or_create(
        username='admin_test_web',
        defaults={
            'email': 'admin_web@test.com',
            'role': 'admin',
            'is_staff': True,
            'is_superuser': True
        }
    )
    
    if created:
        admin.set_password('test123')
        admin.save()
        print("‚úÖ Utilisateur admin de test cr√©√©")
    else:
        print("‚ÑπÔ∏è Utilisateur admin de test existe d√©j√†")
    
    # Cr√©er un dossier de test
    dossier = Dossier.objects.create(
        titre="Dossier de test pour interface web",
        description="Ce dossier est cr√©√© pour tester le bouton de suppression dans l'interface web",
        statut='non_traite'
    )
    
    print(f"‚úÖ Dossier de test cr√©√© : {dossier.titre} (ID: {dossier.id})")
    
    # Simuler une session web
    session = requests.Session()
    
    # URL de base (ajustez selon votre configuration)
    base_url = "http://localhost:8000"
    
    try:
        # 1. Se connecter
        print("üîê Tentative de connexion...")
        login_url = f"{base_url}/users/login/"
        login_data = {
            'username': 'admin_test_web',
            'password': 'test123'
        }
        
        response = session.post(login_url, data=login_data)
        
        if response.status_code == 200:
            print("‚úÖ Connexion r√©ussie")
        else:
            print(f"‚ùå √âchec de connexion (status: {response.status_code})")
            return False
        
        # 2. Acc√©der √† la page de gestion des dossiers
        print("üìÑ Acc√®s √† la page de gestion des dossiers...")
        gestion_url = f"{base_url}/dossiers/gestion/"
        response = session.get(gestion_url)
        
        if response.status_code == 200:
            print("‚úÖ Page de gestion accessible")
            
            # Analyser le HTML pour v√©rifier la pr√©sence du bouton de suppression
            soup = BeautifulSoup(response.content, 'html.parser')
            
            # Chercher le bouton de suppression pour notre dossier
            bouton_suppression = soup.find('button', {
                'onclick': f'supprimerDossier({dossier.id})'
            })
            
            if bouton_suppression:
                print("‚úÖ Bouton de suppression trouv√© dans l'interface")
                
                # V√©rifier la pr√©sence du token CSRF
                csrf_token = soup.find('input', {'name': 'csrfmiddlewaretoken'})
                if csrf_token:
                    print("‚úÖ Token CSRF pr√©sent")
                else:
                    print("‚ùå Token CSRF manquant")
                    return False
                
                # 3. Tester la suppression via POST
                print("üóëÔ∏è Test de suppression via POST...")
                supprimer_url = f"{base_url}/dossiers/dossier/{dossier.id}/supprimer/"
                
                # R√©cup√©rer le token CSRF
                csrf_value = csrf_token.get('value')
                
                supprimer_data = {
                    'csrfmiddlewaretoken': csrf_value
                }
                
                response = session.post(supprimer_url, data=supprimer_data)
                
                if response.status_code == 302:  # Redirection apr√®s suppression
                    print("‚úÖ Suppression r√©ussie (redirection d√©tect√©e)")
                    
                    # V√©rifier que le dossier a bien √©t√© supprim√©
                    try:
                        Dossier.objects.get(id=dossier.id)
                        print("‚ùå Erreur : Le dossier existe encore apr√®s suppression")
                        return False
                    except Dossier.DoesNotExist:
                        print("‚úÖ Confirmation : Le dossier a bien √©t√© supprim√©")
                        return True
                else:
                    print(f"‚ùå √âchec de suppression (status: {response.status_code})")
                    return False
            else:
                print("‚ùå Bouton de suppression non trouv√© dans l'interface")
                return False
        else:
            print(f"‚ùå Impossible d'acc√©der √† la page de gestion (status: {response.status_code})")
            return False
            
    except requests.exceptions.ConnectionError:
        print("‚ùå Impossible de se connecter au serveur. Assurez-vous que le serveur Django est d√©marr√©.")
        return False
    except Exception as e:
        print(f"‚ùå Erreur lors du test : {str(e)}")
        return False

def test_javascript_suppression():
    """Test du JavaScript de suppression"""
    print("\n=== Test du JavaScript de suppression ===")
    
    # Lire le template pour v√©rifier le JavaScript
    template_path = "templates/dossiers/gestion_dossiers.html"
    
    try:
        with open(template_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # V√©rifier la pr√©sence de la fonction JavaScript
        if 'function supprimerDossier(id)' in content:
            print("‚úÖ Fonction JavaScript supprimerDossier trouv√©e")
        else:
            print("‚ùå Fonction JavaScript supprimerDossier manquante")
            return False
        
        # V√©rifier la pr√©sence du token CSRF
        if 'csrfmiddlewaretoken' in content:
            print("‚úÖ Token CSRF pr√©sent dans le template")
        else:
            print("‚ùå Token CSRF manquant dans le template")
            return False
        
        # V√©rifier la cr√©ation du formulaire
        if 'document.createElement(\'form\')' in content:
            print("‚úÖ Cr√©ation de formulaire dynamique trouv√©e")
        else:
            print("‚ùå Cr√©ation de formulaire dynamique manquante")
            return False
        
        return True
        
    except FileNotFoundError:
        print(f"‚ùå Template non trouv√© : {template_path}")
        return False
    except Exception as e:
        print(f"‚ùå Erreur lors de la lecture du template : {str(e)}")
        return False

if __name__ == "__main__":
    print("üîß Test complet du bouton de suppression des dossiers")
    print("=" * 60)
    
    # Test du JavaScript
    js_ok = test_javascript_suppression()
    
    # Test de l'interface web
    web_ok = test_interface_suppression()
    
    print("\n" + "=" * 60)
    print("üìä R√âSULTATS DES TESTS")
    print("=" * 60)
    
    if js_ok:
        print("‚úÖ JavaScript de suppression : OK")
    else:
        print("‚ùå JavaScript de suppression : √âCHEC")
    
    if web_ok:
        print("‚úÖ Interface web de suppression : OK")
    else:
        print("‚ùå Interface web de suppression : √âCHEC")
    
    if js_ok and web_ok:
        print("\nüéâ Tous les tests sont pass√©s avec succ√®s !")
        print("Le bouton de suppression fonctionne correctement.")
    else:
        print("\n‚ö†Ô∏è Certains tests ont √©chou√©.")
        print("V√©rifiez les probl√®mes identifi√©s ci-dessus.")
    
    print("\n" + "=" * 60) 