#!/usr/bin/env python
"""
Test du workflow complet de r√©√©valuation avec d√©cision ant√©rieure
"""

import os
import sys
import django
from datetime import date

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'equivalence.settings')
django.setup()

from dossiers.models import Dossier, Candidat, EtatDossier, ConsistanceAcademique, DecisionCommission
from users.models import CustomUser
from django.test import Client
from django.urls import reverse

def test_workflow_reevaluation():
    """Test du workflow complet de r√©√©valuation"""
    print("=== Test Workflow R√©√©valuation avec D√©cision Ant√©rieure ===")
    
    try:
        # 1. Cr√©er un utilisateur admin
        admin_user = CustomUser.objects.create_user(
            username='admin_test_reevaluation',
            email='admin_reevaluation@example.com',
            password='adminpass123',
            role='admin'
        )
        print("‚úÖ Admin cr√©√©:", admin_user.username)
        
        # 2. Cr√©er un utilisateur professeur
        prof_user = CustomUser.objects.create_user(
            username='prof_test_reevaluation',
            email='prof_reevaluation@example.com',
            password='profpass123',
            role='professeur'
        )
        print("‚úÖ Professeur cr√©√©:", prof_user.username)
        
        # 3. Cr√©er un dossier
        dossier = Dossier.objects.create(
            titre="Dossier test r√©√©valuation",
            description="Test du workflow de r√©√©valuation",
            statut='en_cours'
        )
        dossier.professeurs.add(prof_user)
        print("‚úÖ Dossier cr√©√©:", dossier.titre)
        
        # 4. Cr√©er un candidat
        candidat = Candidat.objects.create(
            dossier=dossier,
            nom="Candidat Test R√©√©valuation",
            date_arrivee=date(2024, 1, 15),
            pays_origine="Maroc"
        )
        print("‚úÖ Candidat cr√©√©:", candidat.nom)
        
        # 5. Cr√©er un √©tat de dossier avec d√©cision ant√©rieure
        etat_dossier = EtatDossier.objects.create(
            candidat=candidat,
            est_nouveau_dossier=False,
            a_decision_anterieure=True,
            date_decision_anterieure=date(2024, 1, 10),
            decision_anterieure="√âquivalence partielle accord√©e. Compl√®tement de dossier demand√©.",
            pieces_demandees="Relev√©s de notes manquants"
        )
        print("‚úÖ √âtat dossier cr√©√© avec d√©cision ant√©rieure")
        
        # 6. Cr√©er une ancienne consistance acad√©mique (d√©cision ant√©rieure)
        ancienne_consistance = ConsistanceAcademique.objects.create(
            candidat=candidat,
            sciences_geodesiques_note=12,
            topographie_note=14,
            photogrammetrie_note=8,
            cartographie_note=10,
            droit_foncier_note=6,
            sig_note=7,
            teledetection_note=5,
            stages_note=8
        )
        print("‚úÖ Ancienne consistance acad√©mique cr√©√©e (note totale: 70/100)")
        
        # 7. Cr√©er une ancienne d√©cision de commission
        ancienne_decision = DecisionCommission.objects.create(
            candidat=candidat,
            score_total=70,
            decision="equivalence_accorder",
            recommandations="√âquivalence partielle accord√©e",
            commentaires="Dossier pr√©c√©demment trait√©"
        )
        print("‚úÖ Ancienne d√©cision de commission cr√©√©e")
        
        # 8. Tester le bouton "Renvoyer au professeur" (simulation admin)
        print("\n--- Test 1: Admin renvoie le dossier au professeur ---")
        client_admin = Client()
        login_success = client_admin.login(username='admin_test_reevaluation', password='adminpass123')
        print(f"‚úÖ Connexion admin: {login_success}")
        
        # Simuler le renvoi au professeur
        url_renvoi = reverse('dossiers:renvoyer_au_professeur', args=[dossier.id])
        response_renvoi = client_admin.post(url_renvoi, {
            'message_admin': 'Veuillez r√©√©valuer ce dossier'
        })
        print(f"‚úÖ R√©ponse renvoi: {response_renvoi.status_code}")
        
        # V√©rifier que l'ancienne √©valuation a √©t√© supprim√©e
        try:
            candidat.refresh_from_db()
            if hasattr(candidat, 'consistance_academique') and candidat.consistance_academique:
                print("‚ùå Ancienne consistance acad√©mique encore pr√©sente")
            else:
                print("‚úÖ Ancienne consistance acad√©mique supprim√©e")
        except:
            print("‚úÖ Ancienne consistance acad√©mique supprim√©e")
        
        # 9. Tester l'acc√®s √† la vue d'√©valuation (professeur)
        print("\n--- Test 2: Professeur acc√®de √† la vue d'√©valuation ---")
        client_prof = Client()
        login_success = client_prof.login(username='prof_test_reevaluation', password='profpass123')
        print(f"‚úÖ Connexion professeur: {login_success}")
        
        # Acc√©der √† la vue d'√©valuation
        url_evaluation = reverse('dossiers:evaluation_equivalence', args=[dossier.id])
        response_evaluation = client_prof.get(url_evaluation)
        print(f"‚úÖ Code r√©ponse √©valuation: {response_evaluation.status_code}")
        
        if response_evaluation.status_code == 200:
            content = response_evaluation.content.decode()
            
            # V√©rifier que la d√©cision ant√©rieure est MASQU√âE (car pas de nouvelle √©valuation)
            if "D√©cision Ant√©rieure" in content:
                print("‚úÖ D√©cision ant√©rieure affich√©e (correct - pas de nouvelle √©valuation)")
            else:
                print("‚ÑπÔ∏è D√©cision ant√©rieure non affich√©e")
            
            # V√©rifier que les sections d'√©valuation sont masqu√©es
            if "Grille d'√©valuation" in content:
                print("‚ùå Grille d'√©valuation affich√©e (ne devrait pas l'√™tre)")
            else:
                print("‚úÖ Grille d'√©valuation masqu√©e (correct)")
                
        else:
            print("‚ùå Erreur d'acc√®s √† la vue d'√©valuation")
        
        # 10. Nettoyer les donn√©es de test
        print("\n--- Nettoyage ---")
        dossier.delete()
        admin_user.delete()
        prof_user.delete()
        print("‚úÖ Donn√©es de test supprim√©es")
        
        print("\nüéâ Test de workflow de r√©√©valuation termin√© avec succ√®s !")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    test_workflow_reevaluation()
