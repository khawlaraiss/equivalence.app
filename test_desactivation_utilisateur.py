#!/usr/bin/env python
"""
Test de la d√©sactivation d'utilisateur
"""

import os
import sys
import django

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'equivalence.settings')
django.setup()

from users.models import CustomUser

def test_desactivation_utilisateur():
    """Tester la d√©sactivation d'utilisateur"""
    print("=== üß™ TEST D√âSACTIVATION UTILISATEUR ===")
    print("V√©rification que la d√©sactivation fonctionne !")
    print()
    
    try:
        # 1. V√©rifier qu'on a des utilisateurs
        utilisateurs = CustomUser.objects.all()
        total = utilisateurs.count()
        print(f"üìä Total utilisateurs: {total}")
        
        if total == 0:
            print("‚ùå Aucun utilisateur trouv√©")
            return
        
        # 2. Trouver un utilisateur actif √† d√©sactiver
        utilisateur_actif = utilisateurs.filter(is_active=True).first()
        if not utilisateur_actif:
            print("‚ùå Aucun utilisateur actif trouv√©")
            return
            
        print(f"üîç Utilisateur de test: {utilisateur_actif.username}")
        print(f"   Statut actuel: {'Actif' if utilisateur_actif.is_active else 'Inactif'}")
        
        # 3. Tester la d√©sactivation
        print(f"\n--- Test 1: D√©sactivation ---")
        ancien_statut = utilisateur_actif.is_active
        utilisateur_actif.is_active = False
        utilisateur_actif.save()
        
        # Recharger depuis la base
        utilisateur_actif.refresh_from_db()
        nouveau_statut = utilisateur_actif.is_active
        
        if nouveau_statut != ancien_statut:
            print(f"‚úÖ D√©sactivation r√©ussie !")
            print(f"   Avant: {'Actif' if ancien_statut else 'Inactif'}")
            print(f"   Apr√®s: {'Actif' if nouveau_statut else 'Inactif'}")
        else:
            print(f"‚ùå √âchec de la d√©sactivation")
        
        # 4. Tester la r√©activation
        print(f"\n--- Test 2: R√©activation ---")
        ancien_statut = utilisateur_actif.is_active
        utilisateur_actif.is_active = True
        utilisateur_actif.save()
        
        # Recharger depuis la base
        utilisateur_actif.refresh_from_db()
        nouveau_statut = utilisateur_actif.is_active
        
        if nouveau_statut != ancien_statut:
            print(f"‚úÖ R√©activation r√©ussie !")
            print(f"   Avant: {'Actif' if ancien_statut else 'Inactif'}")
            print(f"   Apr√®s: {'Actif' if nouveau_statut else 'Inactif'}")
        else:
            print(f"‚ùå √âchec de la r√©activation")
        
        # 5. V√©rifier les statistiques
        print(f"\n--- Test 3: V√©rification des statistiques ---")
        total_actifs = CustomUser.objects.filter(is_active=True).count()
        total_inactifs = CustomUser.objects.filter(is_active=False).count()
        
        print(f"   Utilisateurs actifs: {total_actifs}")
        print(f"   Utilisateurs inactifs: {total_inactifs}")
        print(f"   Total: {total_actifs + total_inactifs}")
        
        if total_actifs + total_inactifs == total:
            print(f"‚úÖ Statistiques coh√©rentes")
        else:
            print(f"‚ùå Incoh√©rence dans les statistiques")
        
        print()
        print("üéØ CONCLUSION:")
        print("   Si les tests 1 et 2 sont r√©ussis,")
        print("   alors la d√©sactivation/r√©activation fonctionne !")
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test: {str(e)}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_desactivation_utilisateur()

